Var: gromit of type int [line: 6]
Sibling: 1  Var: mysteriousPenguin of type int [line: 6]
Sibling: 2  Func: wallace returns type void [line: 9]
.   Child: 0  Parm: wrong of type int [line: 9]
.   Sibling: 1  Parm: trousers of type int [line: 9]
.   Child: 1  Compound [line: 10]
.   .   Child: 0  Var: close of type bool [line: 11]
.   .   .   Child: 0  Const true [line: 11]
.   .   Sibling: 1  Var: shave of type bool [line: 11]
.   .   .   Child: 0  Const false [line: 11]
.   .   Sibling: 2  Var: cheese of type int [line: 12]
.   .   .   Child: 0  Const 17 [line: 12]
.   .   Child: 1  Const 1729 [line: 14]
.   .   Sibling: 1  Id: close [line: 15]
.   .   Sibling: 2  Op: + [line: 16]
.   .   .   Child: 0  Op: * [line: 16]
.   .   .   .   Child: 0  Const 11 [line: 16]
.   .   .   .   Child: 1  Const 22 [line: 16]
.   .   .   Child: 1  Op: * [line: 16]
.   .   .   .   Child: 0  Const 33 [line: 16]
.   .   .   .   Child: 1  Const 44 [line: 16]
.   .   Sibling: 3  Assign: = [line: 17]
.   .   .   Child: 0  Id: close [line: 17]
.   .   .   Child: 1  Id: shave [line: 17]
.   .   Sibling: 4  Assign: = [line: 18]
.   .   .   Child: 0  Id: wrong [line: 18]
.   .   .   Child: 1  Op: % [line: 18]
.   .   .   .   Child: 0  Id: trousers [line: 18]
.   .   .   .   Child: 1  Op: / [line: 18]
.   .   .   .   .   Child: 0  Const 666 [line: 18]
.   .   .   .   .   Child: 1  Id: wrong [line: 18]
.   .   Sibling: 5  Assign: = [line: 19]
.   .   .   Child: 0  Id: gromit [line: 19]
.   .   .   Child: 1  Op: + [line: 19]
.   .   .   .   Child: 0  Op: - [line: 19]
.   .   .   .   .   Child: 0  Op: * [line: 19]
.   .   .   .   .   .   Child: 0  Id: wrong [line: 19]
.   .   .   .   .   .   Child: 1  Id: trousers [line: 19]
.   .   .   .   .   Child: 1  Id: gromit [line: 19]
.   .   .   .   Child: 1  Op: chsign [line: 19]
.   .   .   .   .   Child: 0  Const 42 [line: 19]
.   .   Sibling: 6  Assign: += [line: 20]
.   .   .   Child: 0  Id: gromit [line: 20]
.   .   .   Child: 1  Const 27182818 [line: 20]
.   .   Sibling: 7  Assign: -= [line: 21]
.   .   .   Child: 0  Id: gromit [line: 21]
.   .   .   Child: 1  Op: chsign [line: 21]
.   .   .   .   Child: 0  Const 31415927 [line: 21]
.   .   Sibling: 8  Assign: /= [line: 22]
.   .   .   Child: 0  Id: gromit [line: 22]
.   .   .   Child: 1  Assign: *= [line: 22]
.   .   .   .   Child: 0  Id: wrong [line: 22]
.   .   .   .   Child: 1  Const 42 [line: 22]
.   .   Sibling: 9  Assign: = [line: 23]
.   .   .   Child: 0  Id: close [line: 23]
.   .   .   Child: 1  Op: and [line: 23]
.   .   .   .   Child: 0  Op: < [line: 23]
.   .   .   .   .   Child: 0  Id: wrong [line: 23]
.   .   .   .   .   Child: 1  Id: trousers [line: 23]
.   .   .   .   Child: 1  Op: <= [line: 23]
.   .   .   .   .   Child: 0  Id: trousers [line: 23]
.   .   .   .   .   Child: 1  Id: gromit [line: 23]
.   .   Sibling: 10  Assign: = [line: 24]
.   .   .   Child: 0  Id: shave [line: 24]
.   .   .   Child: 1  Op: and [line: 24]
.   .   .   .   Child: 0  Op: > [line: 24]
.   .   .   .   .   Child: 0  Id: wrong [line: 24]
.   .   .   .   .   Child: 1  Id: trousers [line: 24]
.   .   .   .   Child: 1  Op: >= [line: 24]
.   .   .   .   .   Child: 0  Id: trousers [line: 24]
.   .   .   .   .   Child: 1  Id: gromit [line: 24]
.   .   Sibling: 11  Compound [line: 25]
.   .   .   Child: 0  Var: a of type int [line: 26]
.   .   .   Sibling: 1  Var: grand of type int [line: 26]
.   .   .   .   Child: 0  Op: / [line: 26]
.   .   .   .   .   Child: 0  Const 1 [line: 26]
.   .   .   .   .   Child: 1  Const 2 [line: 26]
.   .   .   Sibling: 2  Var: day of type int [line: 26]
.   .   .   .   Child: 0  Op: * [line: 26]
.   .   .   .   .   Child: 0  Const 3 [line: 26]
.   .   .   .   .   Child: 1  Const 4 [line: 26]
.   .   .   Sibling: 3  Var: out of type int [line: 26]
.   .   .   .   Child: 0  Op: chsign [line: 26]
.   .   .   .   .   Child: 0  Const 9 [line: 26]
.   .   .   Child: 1  Assign: = [line: 27]
.   .   .   .   Child: 0  Id: a [line: 27]
.   .   .   .   Child: 1  Assign: += [line: 27]
.   .   .   .   .   Child: 0  Id: grand [line: 27]
.   .   .   .   .   Child: 1  Assign: -= [line: 27]
.   .   .   .   .   .   Child: 0  Id: day [line: 27]
.   .   .   .   .   .   Child: 1  Id: out [line: 27]
.   .   Sibling: 12  Assign: = [line: 29]
.   .   .   Child: 0  Id: close [line: 29]
.   .   .   Child: 1  Op: and [line: 29]
.   .   .   .   Child: 0  Op: < [line: 29]
.   .   .   .   .   Child: 0  Op: + [line: 29]
.   .   .   .   .   .   Child: 0  Op: * [line: 29]
.   .   .   .   .   .   .   Child: 0  Op: chsign [line: 29]
.   .   .   .   .   .   .   .   Child: 0  Const 1 [line: 29]
.   .   .   .   .   .   .   Child: 1  Const 2 [line: 29]
.   .   .   .   .   .   Child: 1  Const 3 [line: 29]
.   .   .   .   .   Child: 1  Op: * [line: 29]
.   .   .   .   .   .   Child: 0  Const 4 [line: 29]
.   .   .   .   .   .   Child: 1  Const 5 [line: 29]
.   .   .   .   Child: 1  Op: > [line: 29]
.   .   .   .   .   Child: 0  Op: + [line: 29]
.   .   .   .   .   .   Child: 0  Const 6 [line: 29]
.   .   .   .   .   .   Child: 1  Const 7 [line: 29]
.   .   .   .   .   Child: 1  Op: chsign [line: 29]
.   .   .   .   .   .   Child: 0  Const 3 [line: 29]
.   .   Sibling: 13  Assign: = [line: 30]
.   .   .   Child: 0  Id: shave [line: 30]
.   .   .   Child: 1  Op: or [line: 30]
.   .   .   .   Child: 0  Const true [line: 30]
.   .   .   .   Child: 1  Op: and [line: 30]
.   .   .   .   .   Child: 0  Op: < [line: 30]
.   .   .   .   .   .   Child: 0  Op: chsign [line: 30]
.   .   .   .   .   .   .   Child: 0  Op: * [line: 30]
.   .   .   .   .   .   .   .   Child: 0  Const 1 [line: 30]
.   .   .   .   .   .   .   .   Child: 1  Op: + [line: 30]
.   .   .   .   .   .   .   .   .   Child: 0  Const 2 [line: 30]
.   .   .   .   .   .   .   .   .   Child: 1  Const 3 [line: 30]
.   .   .   .   .   .   Child: 1  Op: * [line: 30]
.   .   .   .   .   .   .   Child: 0  Const 4 [line: 30]
.   .   .   .   .   .   .   Child: 1  Const 5 [line: 30]
.   .   .   .   .   Child: 1  Op: > [line: 30]
.   .   .   .   .   .   Child: 0  Op: + [line: 30]
.   .   .   .   .   .   .   Child: 0  Const 6 [line: 30]
.   .   .   .   .   .   .   Child: 1  Const 7 [line: 30]
.   .   .   .   .   .   Child: 1  Op: chsign [line: 30]
.   .   .   .   .   .   .   Child: 0  Const 3 [line: 30]
.   .   Sibling: 14  If [line: 31]
.   .   .   Child: 0  Op: != [line: 31]
.   .   .   .   Child: 0  Id: shave [line: 31]
.   .   .   .   Child: 1  Id: close [line: 31]
.   .   .   Child: 1  Assign: = [line: 31]
.   .   .   .   Child: 0  Id: shave [line: 31]
.   .   .   .   Child: 1  Op: not [line: 31]
.   .   .   .   .   Child: 0  Id: close [line: 31]
.   .   Sibling: 15  If [line: 32]
.   .   .   Child: 0  Op: not [line: 32]
.   .   .   .   Child: 0  Op: or [line: 32]
.   .   .   .   .   Child: 0  Op: == [line: 32]
.   .   .   .   .   .   Child: 0  Id: shave [line: 32]
.   .   .   .   .   .   Child: 1  Id: close [line: 32]
.   .   .   .   .   Child: 1  Op: not [line: 32]
.   .   .   .   .   .   Child: 0  Id: close [line: 32]
.   .   .   Child: 1  Assign: = [line: 32]
.   .   .   .   Child: 0  Id: shave [line: 32]
.   .   .   .   Child: 1  Const true [line: 32]
.   .   .   Child: 2  Assign: = [line: 33]
.   .   .   .   Child: 0  Id: close [line: 33]
.   .   .   .   Child: 1  Const false [line: 33]
.   .   Sibling: 16  Assign: = [line: 34]
.   .   .   Child: 0  Id: mysteriousPenguin [line: 34]
.   .   .   Child: 1  Op: chsign [line: 34]
.   .   .   .   Child: 0  Op: - [line: 34]
.   .   .   .   .   Child: 0  Op: chsign [line: 34]
.   .   .   .   .   .   Child: 0  Op: chsign [line: 34]
.   .   .   .   .   .   .   Child: 0  Const 8 [line: 34]
.   .   .   .   .   Child: 1  Op: chsign [line: 34]
.   .   .   .   .   .   Child: 0  Assign: -- [line: 34]
.   .   .   .   .   .   .   Child: 0  Id: cheese [line: 34]
.   .   Sibling: 17  While [line: 36]
.   .   .   Child: 0  Id: shave [line: 36]
.   .   .   Child: 1  Compound [line: 36]
.   .   .   .   Child: 0  Var: were of type int [line: 37]
.   .   .   .   Sibling: 1  Var: rabbit of type int [line: 37]
.   .   .   .   Sibling: 2  Var: sheep is array of type int [line: 38]
.   .   .   .   Child: 1  Assign: = [line: 40]
.   .   .   .   .   Child: 0  Op: [ [line: 40]
.   .   .   .   .   .   Child: 0  Id: sheep [line: 40]
.   .   .   .   .   .   Child: 1  Const 2 [line: 40]
.   .   .   .   .   Child: 1  Const 1618 [line: 40]
.   .   .   .   Sibling: 1  If [line: 41]
.   .   .   .   .   Child: 0  Op: < [line: 41]
.   .   .   .   .   .   Child: 0  Op: [ [line: 41]
.   .   .   .   .   .   .   Child: 0  Id: sheep [line: 41]
.   .   .   .   .   .   .   Child: 1  Const 2 [line: 41]
.   .   .   .   .   .   Child: 1  Const 496 [line: 41]
.   .   .   .   .   Child: 1  Break [line: 41]
.   .   .   .   Sibling: 2  Call: wallace [line: 42]
.   .   .   .   .   Child: 0  Assign: -- [line: 42]
.   .   .   .   .   .   Child: 0  Id: gromit [line: 42]
.   .   .   .   .   Sibling: 1  Op: - [line: 42]
.   .   .   .   .   .   Child: 0  Id: were [line: 42]
.   .   .   .   .   .   Child: 1  Id: rabbit [line: 42]
.   .   .   .   Sibling: 3  Compound [line: 43]
.   .   .   .   .   Child: 0  Var: the of type int [line: 44]
.   .   .   .   .   Sibling: 1  Var: wrong of type int [line: 44]
.   .   .   .   .   Sibling: 2  Var: trousers of type int [line: 44]
.   .   .   .   .   Child: 1  Assign: = [line: 46]
.   .   .   .   .   .   Child: 0  Id: the [line: 46]
.   .   .   .   .   .   Child: 1  Assign: += [line: 46]
.   .   .   .   .   .   .   Child: 0  Id: wrong [line: 46]
.   .   .   .   .   .   .   Child: 1  Assign: ++ [line: 46]
.   .   .   .   .   .   .   .   Child: 0  Id: trousers [line: 46]
.   .   .   .   .   Sibling: 1  If [line: 47]
.   .   .   .   .   .   Child: 0  Op: == [line: 47]
.   .   .   .   .   .   .   Child: 0  Id: were [line: 47]
.   .   .   .   .   .   .   Child: 1  Id: rabbit [line: 47]
.   .   .   .   .   .   Child: 1  Assign: = [line: 47]
.   .   .   .   .   .   .   Child: 0  Id: were [line: 47]
.   .   .   .   .   .   .   Child: 1  Assign: -- [line: 47]
.   .   .   .   .   .   .   .   Child: 0  Id: wrong [line: 47]
.   .   Sibling: 18  Return [line: 50]
Sibling: 3  Func: penguin returns type bool [line: 54]
.   Child: 0  Parm: Feathers of type char [line: 54]
.   Sibling: 1  Parm: McGraw is array of type char [line: 54]
.   Sibling: 2  Parm: moon of type bool [line: 54]
.   Sibling: 3  Parm: cheese of type bool [line: 54]
.   Sibling: 4  Parm: launch of type int [line: 54]
.   Child: 1  Compound [line: 55]
.   .   Child: 0  Var: tottington of type char [line: 56]
.   .   .   Child: 0  Const 'x' [line: 56]
.   .   Sibling: 1  Var: Wensleydale is array of type char [line: 57]
.   .   Sibling: 2  Var: c of type char [line: 58]
.   .   Sibling: 3  Var: i of type int [line: 59]
.   .   Child: 1  Assign: = [line: 61]
.   .   .   Child: 0  Id: tottington [line: 61]
.   .   .   Child: 1  Id: Feathers [line: 61]
.   .   Sibling: 1  Assign: = [line: 62]
.   .   .   Child: 0  Id: moon [line: 62]
.   .   .   Child: 1  Op: and [line: 62]
.   .   .   .   Child: 0  Op: <= [line: 62]
.   .   .   .   .   Child: 0  Id: McGraw [line: 62]
.   .   .   .   .   Child: 1  Id: Wensleydale [line: 62]
.   .   .   .   Child: 1  Id: moon [line: 62]
.   .   Sibling: 2  Assign: = [line: 63]
.   .   .   Child: 0  Id: Wensleydale [line: 63]
.   .   .   Child: 1  Id: McGraw [line: 63]
.   .   Sibling: 3  Assign: = [line: 64]
.   .   .   Child: 0  Op: [ [line: 64]
.   .   .   .   Child: 0  Id: Wensleydale [line: 64]
.   .   .   .   Child: 1  Op: sizeof [line: 64]
.   .   .   .   .   Child: 0  Id: McGraw [line: 64]
.   .   .   Child: 1  Const 'Q' [line: 64]
.   .   Sibling: 4  Assign: = [line: 65]
.   .   .   Child: 0  Op: [ [line: 65]
.   .   .   .   Child: 0  Id: McGraw [line: 65]
.   .   .   .   Child: 1  Const 3 [line: 65]
.   .   .   Child: 1  Const 'A' [line: 65]
Sibling: 4  Func: Wendolene returns type int [line: 68]
.   Child: 0  Parm: wool of type int [line: 68]
.   Sibling: 1  Parm: shaun of type bool [line: 68]
.   Sibling: 2  Parm: yarn is array of type int [line: 68]
.   Sibling: 3  Parm: preston is array of type bool [line: 68]
.   Child: 1  Compound [line: 69]
.   .   Child: 0  Var: skein of type int [line: 70]
.   .   Child: 1  Assign: = [line: 71]
.   .   .   Child: 0  Op: [ [line: 71]
.   .   .   .   Child: 0  Id: preston [line: 71]
.   .   .   .   Child: 1  Const 3 [line: 71]
.   .   .   Child: 1  Op: or [line: 71]
.   .   .   .   Child: 0  Op: > [line: 71]
.   .   .   .   .   Child: 0  Op: [ [line: 71]
.   .   .   .   .   .   Child: 0  Id: yarn [line: 71]
.   .   .   .   .   .   Child: 1  Const 1 [line: 71]
.   .   .   .   .   Child: 1  Id: wool [line: 71]
.   .   .   .   Child: 1  Op: not [line: 71]
.   .   .   .   .   Child: 0  Id: shaun [line: 71]
.   .   Sibling: 1  Return [line: 72]
.   .   .   Child: 0  Op: + [line: 72]
.   .   .   .   Child: 0  Op: + [line: 72]
.   .   .   .   .   Child: 0  Op: + [line: 72]
.   .   .   .   .   .   Child: 0  Op: + [line: 72]
.   .   .   .   .   .   .   Child: 0  Id: wool [line: 72]
.   .   .   .   .   .   .   Child: 1  Op: [ [line: 72]
.   .   .   .   .   .   .   .   Child: 0  Id: yarn [line: 72]
.   .   .   .   .   .   .   .   Child: 1  Const 0 [line: 72]
.   .   .   .   .   .   Child: 1  Op: sizeof [line: 72]
.   .   .   .   .   .   .   Child: 0  Id: yarn [line: 72]
.   .   .   .   .   Child: 1  Op: [ [line: 72]
.   .   .   .   .   .   Child: 0  Id: yarn [line: 72]
.   .   .   .   .   .   Child: 1  Op: * [line: 72]
.   .   .   .   .   .   .   Child: 0  Const 7 [line: 72]
.   .   .   .   .   .   .   Child: 1  Id: wool [line: 72]
.   .   .   .   Child: 1  Op: [ [line: 72]
.   .   .   .   .   Child: 0  Id: yarn [line: 72]
.   .   .   .   .   Child: 1  Op: - [line: 72]
.   .   .   .   .   .   Child: 0  Op: [ [line: 72]
.   .   .   .   .   .   .   Child: 0  Id: yarn [line: 72]
.   .   .   .   .   .   .   Child: 1  Op: + [line: 72]
.   .   .   .   .   .   .   .   Child: 0  Const 3 [line: 72]
.   .   .   .   .   .   .   .   Child: 1  Op: * [line: 72]
.   .   .   .   .   .   .   .   .   Child: 0  Id: wool [line: 72]
.   .   .   .   .   .   .   .   .   Child: 1  Const 2 [line: 72]
.   .   .   .   .   .   Child: 1  Const 4 [line: 72]
Sibling: 5  Func: ramsBottom returns type bool [line: 76]
.   Child: 1  Compound [line: 77]
.   .   Child: 0  Var: chicken is array of type int [line: 78]
.   .   Sibling: 1  Var: run is array of type bool [line: 79]
.   .   Sibling: 2  Var: wallace is array of type int [line: 80]
.   .   Sibling: 3  Var: gromit is array of type int [line: 80]
.   .   Child: 1  Op: * [line: 82]
.   .   .   Child: 0  Const 42 [line: 82]
.   .   .   Child: 1  Call: Wendolene [line: 82]
.   .   .   .   Child: 0  Op: + [line: 82]
.   .   .   .   .   Child: 0  Op: + [line: 82]
.   .   .   .   .   .   Child: 0  Const 1 [line: 82]
.   .   .   .   .   .   Child: 1  Const 2 [line: 82]
.   .   .   .   .   Child: 1  Const 3 [line: 82]
.   .   .   .   Sibling: 1  Op: or [line: 82]
.   .   .   .   .   Child: 0  Op: not [line: 82]
.   .   .   .   .   .   Child: 0  Const true [line: 82]
.   .   .   .   .   Child: 1  Op: and [line: 82]
.   .   .   .   .   .   Child: 0  Const true [line: 82]
.   .   .   .   .   .   Child: 1  Const false [line: 82]
.   .   .   .   Sibling: 2  Id: chicken [line: 82]
.   .   .   .   Sibling: 3  Id: run [line: 82]
.   .   Sibling: 1  Op: [ [line: 83]
.   .   .   Child: 0  Id: run [line: 83]
.   .   .   Child: 1  Op: - [line: 83]
.   .   .   .   Child: 0  Op: sizeof [line: 83]
.   .   .   .   .   Child: 0  Id: run [line: 83]
.   .   .   .   Child: 1  Const 1 [line: 83]
.   .   Sibling: 2  Return [line: 85]
.   .   .   Child: 0  Op: not [line: 85]
.   .   .   .   Child: 0  Op: >= [line: 85]
.   .   .   .   .   Child: 0  Op: [ [line: 85]
.   .   .   .   .   .   Child: 0  Id: wallace [line: 85]
.   .   .   .   .   .   Child: 1  Const 1 [line: 85]
.   .   .   .   .   Child: 1  Op: * [line: 85]
.   .   .   .   .   .   Child: 0  Op: chsign [line: 85]
.   .   .   .   .   .   .   Child: 0  Op: [ [line: 85]
.   .   .   .   .   .   .   .   Child: 0  Id: gromit [line: 85]
.   .   .   .   .   .   .   .   Child: 1  Const 2 [line: 85]
.   .   .   .   .   .   Child: 1  Const 3 [line: 85]
Sibling: 6  Func: cheese returns type int [line: 88]
.   Child: 0  Parm: x of type int [line: 88]
.   Sibling: 1  Parm: y of type int [line: 88]
.   Child: 1  Compound [line: 88]
.   .   Child: 1  While [line: 88]
.   .   .   Child: 0  Op: > [line: 88]
.   .   .   .   Child: 0  Id: x [line: 88]
.   .   .   .   Child: 1  Const 0 [line: 88]
.   .   .   Child: 1  If [line: 88]
.   .   .   .   Child: 0  Op: > [line: 88]
.   .   .   .   .   Child: 0  Id: y [line: 88]
.   .   .   .   .   Child: 1  Const 3 [line: 88]
.   .   .   .   Child: 1  Assign: -- [line: 88]
.   .   .   .   .   Child: 0  Id: x [line: 88]
.   .   .   .   Child: 2  Return [line: 88]
.   .   .   .   .   Child: 0  Op: % [line: 88]
.   .   .   .   .   .   Child: 0  Op: * [line: 88]
.   .   .   .   .   .   .   Child: 0  Id: x [line: 88]
.   .   .   .   .   .   .   Child: 1  Id: x [line: 88]
.   .   .   .   .   .   Child: 1  Id: y [line: 88]
Sibling: 7  Func: Wensleydale returns type int [line: 90]
.   Child: 0  Parm: x of type int [line: 90]
.   Sibling: 1  Parm: y of type int [line: 90]
.   Child: 1  Compound [line: 90]
.   .   Child: 1  Return [line: 90]
.   .   .   Child: 0  Call: cheese [line: 90]
.   .   .   .   Child: 0  Id: x [line: 90]
.   .   .   .   Sibling: 1  Id: gromit [line: 90]
Sibling: 8  Func: LadyCampanula returns type int [line: 92]
.   Child: 0  Parm: c of type char [line: 92]
.   Sibling: 1  Parm: s is array of type char [line: 92]
.   Child: 1  Compound [line: 92]
.   .   Child: 1  While [line: 92]
.   .   .   Child: 0  Const true [line: 92]
.   .   .   Child: 1  For [line: 92]
.   .   .   .   Child: 0  Var: i of type int [line: 92]
.   .   .   .   Child: 1  Range [line: 92]
.   .   .   .   .   Child: 0  Op: - [line: 92]
.   .   .   .   .   .   Child: 0  Op: sizeof [line: 92]
.   .   .   .   .   .   .   Child: 0  Id: s [line: 92]
.   .   .   .   .   .   Child: 1  Const 1 [line: 92]
.   .   .   .   .   Child: 1  Const 0 [line: 92]
.   .   .   .   .   Child: 2  Op: chsign [line: 92]
.   .   .   .   .   .   Child: 0  Const 1 [line: 92]
.   .   .   .   Child: 2  If [line: 92]
.   .   .   .   .   Child: 0  Op: == [line: 92]
.   .   .   .   .   .   Child: 0  Op: [ [line: 92]
.   .   .   .   .   .   .   Child: 0  Id: s [line: 92]
.   .   .   .   .   .   .   Child: 1  Id: i [line: 92]
.   .   .   .   .   .   Child: 1  Id: c [line: 92]
.   .   .   .   .   Child: 1  Return [line: 92]
.   .   .   .   .   .   Child: 0  Id: i [line: 92]
Sibling: 9  Func: MrsTweedy returns type char [line: 95]
.   Child: 0  Parm: c of type char [line: 95]
.   Sibling: 1  Parm: s is array of type char [line: 95]
.   Child: 1  Compound [line: 96]
.   .   Child: 1  For [line: 97]
.   .   .   Child: 0  Var: ginger of type int [line: 97]
.   .   .   Child: 1  Range [line: 97]
.   .   .   .   Child: 0  Const 0 [line: 97]
.   .   .   .   Child: 1  Const 10 [line: 97]
.   .   .   Child: 2  Assign: = [line: 97]
.   .   .   .   Child: 0  Op: [ [line: 97]
.   .   .   .   .   Child: 0  Id: s [line: 97]
.   .   .   .   .   Child: 1  Id: ginger [line: 97]
.   .   .   .   Child: 1  Id: c [line: 97]
.   .   Sibling: 1  For [line: 98]
.   .   .   Child: 0  Var: pastry of type int [line: 98]
.   .   .   Child: 1  Range [line: 98]
.   .   .   .   Child: 0  Const 0 [line: 98]
.   .   .   .   Child: 1  Const 2 [line: 98]
.   .   .   .   Child: 2  Const 7 [line: 98]
.   .   .   Child: 2  If [line: 98]
.   .   .   .   Child: 0  Op: == [line: 98]
.   .   .   .   .   Child: 0  Op: [ [line: 98]
.   .   .   .   .   .   Child: 0  Id: s [line: 98]
.   .   .   .   .   .   Child: 1  Const 0 [line: 98]
.   .   .   .   .   Child: 1  Op: [ [line: 98]
.   .   .   .   .   .   Child: 0  Id: s [line: 98]
.   .   .   .   .   .   Child: 1  Const 1 [line: 98]
.   .   .   .   Child: 1  Break [line: 98]
.   .   Sibling: 2  While [line: 99]
.   .   .   Child: 0  Const true [line: 99]
.   .   .   Child: 1  Break [line: 99]
.   .   Sibling: 3  Return [line: 101]
.   .   .   Child: 0  Const 'x' [line: 101]
Sibling: 10  Func: TheWereRabbit returns type char [line: 104]
.   Child: 0  Parm: x of type int [line: 104]
.   Child: 1  Compound [line: 105]
.   .   Child: 1  If [line: 106]
.   .   .   Child: 0  Op: == [line: 106]
.   .   .   .   Child: 0  Id: x [line: 106]
.   .   .   .   Child: 1  Const 0 [line: 106]
.   .   .   Child: 1  Return [line: 106]
.   .   .   .   Child: 0  Const '@' [line: 106]
.   .   .   Child: 2  If [line: 107]
.   .   .   .   Child: 0  Op: == [line: 107]
.   .   .   .   .   Child: 0  Id: x [line: 107]
.   .   .   .   .   Child: 1  Const 1 [line: 107]
.   .   .   .   Child: 1  Return [line: 107]
.   .   .   .   .   Child: 0  Const 'a' [line: 107]
.   .   .   .   Child: 2  If [line: 108]
.   .   .   .   .   Child: 0  Op: == [line: 108]
.   .   .   .   .   .   Child: 0  Id: x [line: 108]
.   .   .   .   .   .   Child: 1  Const 2 [line: 108]
.   .   .   .   .   Child: 1  Return [line: 108]
.   .   .   .   .   .   Child: 0  Const 'b' [line: 108]
.   .   .   .   .   Child: 2  If [line: 109]
.   .   .   .   .   .   Child: 0  Op: == [line: 109]
.   .   .   .   .   .   .   Child: 0  Id: x [line: 109]
.   .   .   .   .   .   .   Child: 1  Const 3 [line: 109]
.   .   .   .   .   .   Child: 1  Return [line: 109]
.   .   .   .   .   .   .   Child: 0  Const 'c' [line: 109]
.   .   .   .   .   .   Child: 2  If [line: 110]
.   .   .   .   .   .   .   Child: 0  Op: == [line: 110]
.   .   .   .   .   .   .   .   Child: 0  Id: x [line: 110]
.   .   .   .   .   .   .   .   Child: 1  Const 4 [line: 110]
.   .   .   .   .   .   .   Child: 1  Return [line: 110]
.   .   .   .   .   .   .   .   Child: 0  Const 'd' [line: 110]
.   .   .   .   .   .   .   Child: 2  Return [line: 111]
.   .   .   .   .   .   .   .   Child: 0  Const ' ' [line: 111]
Sibling: 11  Func: main returns type int [line: 114]
.   Child: 1  Compound [line: 115]
.   .   Child: 0  Var: wool of type int [line: 116]
.   .   Sibling: 1  Var: yarn is array of type int [line: 116]
.   .   Sibling: 2  Var: shaun of type bool [line: 117]
.   .   Sibling: 3  Var: preston is array of type bool [line: 117]
.   .   Sibling: 4  Var: rocky is array of type char [line: 118]
.   .   Child: 1  Call: wallace [line: 120]
.   .   .   Child: 0  Call: cheese [line: 120]
.   .   .   .   Child: 0  Const 62 [line: 120]
.   .   .   .   Sibling: 1  Op: chsign [line: 120]
.   .   .   .   .   Child: 0  Const 311 [line: 120]
.   .   .   Sibling: 1  Id: gromit [line: 120]
.   .   Sibling: 1  Assign: = [line: 121]
.   .   .   Child: 0  Id: rocky [line: 121]
.   .   .   Child: 1  Const is array "molybdenum" [line: 121]
.   .   Sibling: 2  Call: MrsTweedy [line: 123]
.   .   .   Child: 0  Const 'Z' [line: 123]
.   .   .   Sibling: 1  Id: rocky [line: 123]
.   .   Sibling: 3  Op: + [line: 125]
.   .   .   Child: 0  Op: [ [line: 125]
.   .   .   .   Child: 0  Id: yarn [line: 125]
.   .   .   .   Child: 1  Op: ? [line: 125]
.   .   .   .   .   Child: 0  Const 100 [line: 125]
.   .   .   Child: 1  Op: [ [line: 125]
.   .   .   .   Child: 0  Id: yarn [line: 125]
.   .   .   .   Child: 1  Op: ? [line: 125]
.   .   .   .   .   Child: 0  Op: sizeof [line: 125]
.   .   .   .   .   .   Child: 0  Id: yarn [line: 125]
.   .   Sibling: 4  Return [line: 127]
.   .   .   Child: 0  Call: Wendolene [line: 127]
.   .   .   .   Child: 0  Op: * [line: 127]
.   .   .   .   .   Child: 0  Op: sizeof [line: 127]
.   .   .   .   .   .   Child: 0  Id: preston [line: 127]
.   .   .   .   .   Child: 1  Op: sizeof [line: 127]
.   .   .   .   .   .   Child: 0  Id: yarn [line: 127]
.   .   .   .   Sibling: 1  Id: shaun [line: 127]
.   .   .   .   Sibling: 2  Id: yarn [line: 127]
.   .   .   .   Sibling: 3  Id: preston [line: 127]
Sibling: 12  Var: aBigLongVariableName6andthx1138 of type bool [line: 130]
Sibling: 13  Var: odd of type int [line: 131]
Sibling: 14  Var: separation of type int [line: 131]
Sibling: 15  Var: of of type int [line: 131]
Sibling: 16  Var: stuff of type int [line: 132]
Sibling: 17  Var: ant is array of type char [line: 134]
.   Child: 0  Const is array "unwrinkled" [line: 134]
Sibling: 18  Var: bat of type char [line: 135]
.   Child: 0  Const ''' [line: 135]
Sibling: 19  Var: cat of type char [line: 136]
.   Child: 0  Const 't' [line: 136]
Sibling: 20  Var: dog of type char [line: 137]
.   Child: 0  Const '
' [line: 137]
Sibling: 21  Var: hog of type char [line: 138]
.   Child: 0  Const ' ' [line: 138]
WARNING(46): Variable 'trousers' may be uninitialized when used here.
WARNING(62): Variable 'Wensleydale' may be uninitialized when used here.
WARNING(58): The variable 'c' seems not to be used.
WARNING(54): The variable 'cheese' seems not to be used.
WARNING(59): The variable 'i' seems not to be used.
WARNING(54): The variable 'launch' seems not to be used.
WARNING(70): The variable 'skein' seems not to be used.
WARNING(82): Variable 'chicken' may be uninitialized when used here.
WARNING(82): Variable 'run' may be uninitialized when used here.
WARNING(85): Variable 'wallace' may be uninitialized when used here.
WARNING(85): Variable 'gromit' may be uninitialized when used here.
WARNING(90): The variable 'y' seems not to be used.
WARNING(98): The variable 'pastry' seems not to be used.
WARNING(125): Variable 'yarn' may be uninitialized when used here.
WARNING(127): Variable 'preston' may be uninitialized when used here.
WARNING(127): Variable 'shaun' may be uninitialized when used here.
WARNING(116): The variable 'wool' seems not to be used.
Number of warnings: 17
Number of errors: 0
