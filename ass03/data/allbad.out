Func: ant returns type char [line: 2]
.   Child: 1  Compound [line: 2]
.   .   Child: 1  Return [line: 2]
.   .   .   Child: 0  Const 111 [line: 2]
Sibling: 1  Func: bat returns type void [line: 4]
.   Child: 0  Parm: a of type bool [line: 4]
.   Sibling: 1  Parm: c of type int [line: 4]
.   Child: 1  Compound [line: 4]
.   .   Child: 0  Var: b of type int [line: 5]
.   .   Child: 1  Assign: = [line: 7]
.   .   .   Child: 0  Id: a [line: 7]
.   .   .   Child: 1  Const 222 [line: 7]
.   .   Sibling: 1  Assign: = [line: 8]
.   .   .   Child: 0  Id: b [line: 8]
.   .   .   Child: 1  Const true [line: 8]
.   .   Sibling: 2  Assign: = [line: 9]
.   .   .   Child: 0  Id: c [line: 9]
.   .   .   Child: 1  Const 'z' [line: 9]
.   .   Sibling: 3  If [line: 11]
.   .   .   Child: 0  Op: > [line: 11]
.   .   .   .   Child: 0  Id: a [line: 11]
.   .   .   .   Child: 1  Const 222 [line: 11]
.   .   .   Child: 1  Const 333 [line: 11]
.   .   Sibling: 4  If [line: 12]
.   .   .   Child: 0  Op: < [line: 12]
.   .   .   .   Child: 0  Id: a [line: 12]
.   .   .   .   Child: 1  Const 333 [line: 12]
.   .   .   Child: 1  Const 444 [line: 12]
.   .   .   Child: 2  Const 555 [line: 12]
.   .   Sibling: 5  If [line: 13]
.   .   .   Child: 0  Op: <= [line: 13]
.   .   .   .   Child: 0  Id: a [line: 13]
.   .   .   .   Child: 1  Const 666 [line: 13]
.   .   .   Child: 1  If [line: 13]
.   .   .   .   Child: 0  Op: >= [line: 13]
.   .   .   .   .   Child: 0  Id: a [line: 13]
.   .   .   .   .   Child: 1  Const 777 [line: 13]
.   .   .   .   Child: 1  Const 888 [line: 13]
.   .   .   .   Child: 2  Const 555 [line: 13]
.   .   Sibling: 6  While [line: 14]
.   .   .   Child: 0  Op: == [line: 14]
.   .   .   .   Child: 0  Const 999 [line: 14]
.   .   .   .   Child: 1  Id: a [line: 14]
.   .   .   Child: 1  Const 1010 [line: 14]
.   .   Sibling: 7  If [line: 15]
.   .   .   Child: 0  Id: b [line: 15]
.   .   .   Child: 1  If [line: 15]
.   .   .   .   Child: 0  Op: not [line: 15]
.   .   .   .   .   Child: 0  Id: b [line: 15]
.   .   .   .   Child: 1  While [line: 15]
.   .   .   .   .   Child: 0  Op: and [line: 15]
.   .   .   .   .   .   Child: 0  Id: b [line: 15]
.   .   .   .   .   .   Child: 1  Const true [line: 15]
.   .   .   .   .   Child: 1  Const 1111 [line: 15]
.   .   .   .   Child: 2  Const 1212 [line: 15]
.   .   Sibling: 8  If [line: 16]
.   .   .   Child: 0  Id: b [line: 16]
.   .   .   Child: 1  If [line: 16]
.   .   .   .   Child: 0  Op: not [line: 16]
.   .   .   .   .   Child: 0  Id: b [line: 16]
.   .   .   .   Child: 1  While [line: 16]
.   .   .   .   .   Child: 0  Op: or [line: 16]
.   .   .   .   .   .   Child: 0  Id: b [line: 16]
.   .   .   .   .   .   Child: 1  Const true [line: 16]
.   .   .   .   .   Child: 1  Const 1313 [line: 16]
.   .   .   .   Child: 2  Const 1414 [line: 16]
.   .   .   Child: 2  Const 1515 [line: 16]
.   .   Sibling: 9  If [line: 17]
.   .   .   Child: 0  Assign: = [line: 17]
.   .   .   .   Child: 0  Id: b [line: 17]
.   .   .   .   Child: 1  Const true [line: 17]
.   .   .   Child: 1  Const 1616 [line: 17]
.   .   Sibling: 10  While [line: 19]
.   .   .   Child: 0  Const false [line: 19]
.   .   .   Child: 1  Break [line: 19]
.   .   Sibling: 11  Op: + [line: 21]
.   .   .   Child: 0  Id: a [line: 21]
.   .   .   Child: 1  Const 1717 [line: 21]
.   .   Sibling: 12  Op: - [line: 22]
.   .   .   Child: 0  Const 1818 [line: 22]
.   .   .   Child: 1  Id: a [line: 22]
.   .   Sibling: 13  Op: * [line: 23]
.   .   .   Child: 0  Id: a [line: 23]
.   .   .   Child: 1  Const 1919 [line: 23]
.   .   Sibling: 14  Op: / [line: 24]
.   .   .   Child: 0  Const 2020 [line: 24]
.   .   .   Child: 1  Id: a [line: 24]
.   .   Sibling: 15  Op: % [line: 25]
.   .   .   Child: 0  Id: a [line: 25]
.   .   .   Child: 1  Const 2121 [line: 25]
.   .   Sibling: 16  Assign: += [line: 27]
.   .   .   Child: 0  Id: a [line: 27]
.   .   .   Child: 1  Const 1 [line: 27]
.   .   Sibling: 17  Assign: -= [line: 28]
.   .   .   Child: 0  Id: a [line: 28]
.   .   .   Child: 1  Const 2 [line: 28]
.   .   Sibling: 18  Assign: *= [line: 29]
.   .   .   Child: 0  Id: a [line: 29]
.   .   .   Child: 1  Const 3 [line: 29]
.   .   Sibling: 19  Assign: /= [line: 30]
.   .   .   Child: 0  Id: a [line: 30]
.   .   .   Child: 1  Const 4 [line: 30]
.   .   Sibling: 20  Op: chsign [line: 32]
.   .   .   Child: 0  Id: a [line: 32]
.   .   Sibling: 21  Op: not [line: 33]
.   .   .   Child: 0  Id: b [line: 33]
.   .   Sibling: 22  Op: ? [line: 34]
.   .   .   Child: 0  Id: a [line: 34]
Sibling: 2  Func: cat returns type bool [line: 37]
.   Child: 1  Compound [line: 38]
.   .   Child: 0  Var: a of type char [line: 39]
.   .   Sibling: 1  Var: b of type int [line: 39]
.   .   Sibling: 2  Var: c of type bool [line: 39]
.   .   Sibling: 3  Var: aa is array of type bool [line: 40]
.   .   Sibling: 4  Var: ba is array of type char [line: 40]
.   .   Sibling: 5  Var: ca is array of type int [line: 40]
.   .   Child: 1  Op: [ [line: 42]
.   .   .   Child: 0  Id: aa [line: 42]
.   .   .   Child: 1  Const 2 [line: 42]
.   .   Sibling: 1  Assign: = [line: 43]
.   .   .   Child: 0  Op: [ [line: 43]
.   .   .   .   Child: 0  Id: ba [line: 43]
.   .   .   .   Child: 1  Id: a [line: 43]
.   .   .   Child: 1  Id: b [line: 43]
.   .   Sibling: 2  Assign: = [line: 44]
.   .   .   Child: 0  Op: [ [line: 44]
.   .   .   .   Child: 0  Id: ca [line: 44]
.   .   .   .   Child: 1  Op: [ [line: 44]
.   .   .   .   .   Child: 0  Id: aa [line: 44]
.   .   .   .   .   Child: 1  Const 1 [line: 44]
.   .   .   Child: 1  Id: c [line: 44]
.   .   Sibling: 3  Op: [ [line: 45]
.   .   .   Child: 0  Id: aa [line: 45]
.   .   .   Child: 1  Id: aa [line: 45]
.   .   Sibling: 4  Op: [ [line: 46]
.   .   .   Child: 0  Id: cat [line: 46]
.   .   .   Child: 1  Const 3 [line: 46]
.   .   Sibling: 5  Call: cat [line: 47]
.   .   .   Child: 0  Id: cat [line: 47]
.   .   Sibling: 6  Op: sizeof [line: 49]
.   .   .   Child: 0  Id: ba [line: 49]
.   .   Sibling: 7  For [line: 51]
.   .   .   Child: 0  Var: z of type int [line: 51]
.   .   .   Child: 1  Range [line: 51]
.   .   .   .   Child: 0  Const 1 [line: 51]
.   .   .   .   Child: 1  Const 10 [line: 51]
.   .   .   Child: 2  Op: + [line: 51]
.   .   .   .   Child: 0  Id: z [line: 51]
.   .   .   .   Child: 1  Id: z [line: 51]
.   .   Sibling: 8  For [line: 52]
.   .   .   Child: 0  Var: z of type int [line: 52]
.   .   .   Child: 1  Range [line: 52]
.   .   .   .   Child: 0  Const 3 [line: 52]
.   .   .   .   Child: 1  Const 201 [line: 52]
.   .   .   .   Child: 2  Const 11 [line: 52]
.   .   .   Child: 2  Assign: = [line: 52]
.   .   .   .   Child: 0  Id: z [line: 52]
.   .   .   .   Child: 1  Id: z [line: 52]
.   .   Sibling: 9  For [line: 53]
.   .   .   Child: 0  Var: z of type int [line: 53]
.   .   .   Child: 1  Range [line: 53]
.   .   .   .   Child: 0  Const 0 [line: 53]
.   .   .   .   Child: 1  Const 10 [line: 53]
.   .   .   Child: 2  Compound [line: 53]
.   .   .   .   Child: 1  Assign: = [line: 54]
.   .   .   .   .   Child: 0  Id: a [line: 54]
.   .   .   .   .   Child: 1  Id: z [line: 54]
.   .   Sibling: 10  Assign: = [line: 57]
.   .   .   Child: 0  Id: aa [line: 57]
.   .   .   Child: 1  Id: aa [line: 57]
.   .   Sibling: 11  Op: == [line: 58]
.   .   .   Child: 0  Id: ba [line: 58]
.   .   .   Child: 1  Id: ba [line: 58]
.   .   Sibling: 12  Op: != [line: 59]
.   .   .   Child: 0  Id: ca [line: 59]
.   .   .   Child: 1  Id: ca [line: 59]
.   .   Sibling: 13  Op: > [line: 60]
.   .   .   Child: 0  Id: aa [line: 60]
.   .   .   Child: 1  Id: aa [line: 60]
.   .   Sibling: 14  Op: >= [line: 61]
.   .   .   Child: 0  Id: ba [line: 61]
.   .   .   Child: 1  Id: ba [line: 61]
.   .   Sibling: 15  Op: < [line: 62]
.   .   .   Child: 0  Id: ca [line: 62]
.   .   .   Child: 1  Id: ca [line: 62]
.   .   Sibling: 16  Op: <= [line: 63]
.   .   .   Child: 0  Id: aa [line: 63]
.   .   .   Child: 1  Id: aa [line: 63]
.   .   Sibling: 17  Assign: = [line: 65]
.   .   .   Child: 0  Id: ca [line: 65]
.   .   .   Child: 1  Const is array "dogs are great" [line: 65]
.   .   Sibling: 18  Return [line: 67]
.   .   .   Child: 0  Id: aa [line: 67]
Sibling: 3  Func: dog returns type void [line: 70]
.   Child: 0  Parm: i of type int [line: 70]
.   Child: 1  Compound [line: 70]
.   .   Child: 1  If [line: 71]
.   .   .   Child: 0  Op: == [line: 71]
.   .   .   .   Child: 0  Id: i [line: 71]
.   .   .   .   Child: 1  Const 3 [line: 71]
.   .   .   Child: 1  Compound [line: 71]
.   .   .   .   Child: 0  Var: i of type int [line: 72]
.   .   .   .   Child: 1  Assign: = [line: 73]
.   .   .   .   .   Child: 0  Id: i [line: 73]
.   .   .   .   .   Child: 1  Id: i [line: 73]
.   .   .   .   Sibling: 1  Return [line: 74]
Sibling: 4  Func: elk returns type void [line: 79]
.   Child: 0  Parm: a of type int [line: 79]
.   Sibling: 1  Parm: a of type int [line: 79]
.   Child: 1  Compound [line: 80]
.   .   Child: 0  Var: a of type int [line: 81]
.   .   Child: 1  Assign: = [line: 82]
.   .   .   Child: 0  Id: b [line: 82]
.   .   .   Child: 1  Id: a [line: 82]
.   .   Sibling: 1  Compound [line: 83]
.   .   .   Child: 0  Var: a of type int [line: 84]
.   .   .   Sibling: 1  Var: b of type int [line: 84]
.   .   .   Child: 1  Assign: = [line: 85]
.   .   .   .   Child: 0  Id: c [line: 85]
.   .   .   .   Child: 1  Id: c [line: 85]
.   .   .   Sibling: 1  Assign: = [line: 86]
.   .   .   .   Child: 0  Id: c [line: 86]
.   .   .   .   Child: 1  Id: b [line: 86]
.   .   .   Sibling: 2  Assign: = [line: 87]
.   .   .   .   Child: 0  Id: b [line: 87]
.   .   .   .   Child: 1  Id: b [line: 87]
Sibling: 5  Func: mane returns type int [line: 91]
.   Child: 1  Compound [line: 92]
.   .   Child: 0  Var: bbb of type bool [line: 93]
.   .   Sibling: 1  Var: ccc is array of type char [line: 94]
.   .   Child: 1  Op: ? [line: 96]
.   .   .   Child: 0  Id: ccc [line: 96]
.   .   Sibling: 1  Op: / [line: 97]
.   .   .   Child: 0  Id: ccc [line: 97]
.   .   .   Child: 1  Id: ccc [line: 97]
.   .   Sibling: 2  Op: sizeof [line: 98]
.   .   .   Child: 0  Id: bbb [line: 98]
.   .   Sibling: 3  Call: bbb [line: 99]
.   .   .   Child: 0  Id: bbb [line: 99]
.   .   Sibling: 4  Call: ant [line: 100]
.   .   Sibling: 5  Call: bat [line: 101]
.   .   .   Child: 0  Const 676 [line: 101]
.   .   .   Sibling: 1  Const 'g' [line: 101]
.   .   Sibling: 6  Assign: = [line: 102]
.   .   .   Child: 0  Op: [ [line: 102]
.   .   .   .   Child: 0  Id: ccc [line: 102]
.   .   .   .   Child: 1  Const 3 [line: 102]
.   .   .   Child: 1  Call: cat [line: 102]
.   .   Sibling: 7  Call: bat [line: 103]
.   .   .   Child: 0  Call: ant [line: 103]
.   .   .   Sibling: 1  Call: cat [line: 103]
.   .   Sibling: 8  Assign: = [line: 104]
.   .   .   Child: 0  Id: bbb [line: 104]
.   .   .   Child: 1  Op: != [line: 104]
.   .   .   .   Child: 0  Op: [ [line: 104]
.   .   .   .   .   Child: 0  Id: ccc [line: 104]
.   .   .   .   .   Child: 1  Const 2 [line: 104]
.   .   .   .   Child: 1  Const 'r' [line: 104]
.   .   Sibling: 9  Op: + [line: 105]
.   .   .   Child: 0  Call: dog [line: 105]
.   .   .   Child: 1  Call: cat [line: 105]
.   .   Sibling: 10  Return [line: 107]
.   .   .   Child: 0  Op: + [line: 107]
.   .   .   .   Child: 0  Call: ant [line: 107]
.   .   .   .   Child: 1  Const 807 [line: 107]
Sibling: 6  Var: mane of type int [line: 110]
ERROR(7): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(8): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(9): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(11): '>' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(12): '<' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(13): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(13): '>=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(14): '==' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(15): Unary 'not' requires an operand of type bool but was given type int.
ERROR(15): 'and' requires operands of type bool but lhs is of type int.
ERROR(16): Unary 'not' requires an operand of type bool but was given type int.
ERROR(16): 'or' requires operands of type bool but lhs is of type int.
ERROR(17): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(21): '+' requires operands of type int but lhs is of type bool.
ERROR(22): '-' requires operands of type int but rhs is of type bool.
ERROR(23): '*' requires operands of type int but lhs is of type bool.
ERROR(24): '/' requires operands of type int but rhs is of type bool.
ERROR(25): '%' requires operands of type int but lhs is of type bool.
ERROR(27): '+=' requires operands of type int but lhs is of type bool.
ERROR(28): '-=' requires operands of type int but lhs is of type bool.
ERROR(29): '*=' requires operands of type int but lhs is of type bool.
ERROR(30): '/=' requires operands of type int but lhs is of type bool.
ERROR(32): Unary 'chsign' requires an operand of type int but was given type bool.
ERROR(33): Unary 'not' requires an operand of type bool but was given type int.
ERROR(34): Unary '?' requires an operand of type int but was given type bool.
WARNING(42): Variable 'aa' may be uninitialized when used here.
ERROR(43): Array 'ba' should be indexed by type int but got type char.
WARNING(43): Variable 'b' may be uninitialized when used here.
ERROR(43): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(44): Array 'ca' should be indexed by type int but got type bool.
WARNING(44): Variable 'c' may be uninitialized when used here.
ERROR(44): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(45): Array 'aa' should be indexed by type int but got type bool.
ERROR(45): Array index is the unindexed array 'aa'.
ERROR(46): Cannot use function 'cat' as a variable.
ERROR(46): Cannot index nonarray 'cat'.
ERROR(47): Cannot use function 'cat' as a variable.
ERROR(54): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(65): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(67): Cannot return an array.
WARNING(73): Variable 'i' may be uninitialized when used here.
ERROR(79): Symbol 'a' is already declared at line 79.
ERROR(81): Symbol 'a' is already declared at line 79.
ERROR(82): Symbol 'b' is not declared.
ERROR(85): Symbol 'c' is not declared.
ERROR(85): Symbol 'c' is not declared.
ERROR(86): Symbol 'c' is not declared.
WARNING(86): Variable 'b' may be uninitialized when used here.
WARNING(84): The variable 'a' seems not to be used.
ERROR(96): Unary '?' requires an operand of type int but was given type char.
ERROR(96): The operation '?' does not work with arrays.
ERROR(97): '/' requires operands of type int but lhs is of type char.
ERROR(97): '/' requires operands of type int but rhs is of type char.
ERROR(97): The operation '/' does not work with arrays.
ERROR(98): The operation 'sizeof' only works with arrays.
ERROR(99): 'bbb' is a simple variable and cannot be called.
ERROR(102): '=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(105): '+' requires operands of type int but lhs is of type void.
ERROR(105): '+' requires operands of type int but rhs is of type bool.
ERROR(107): '+' requires operands of type int but lhs is of type char.
ERROR(110): Symbol 'mane' is already declared at line 91.
ERROR(LINKER): A function named 'main()' must be defined.
Number of warnings: 6
Number of errors: 56
