Var: fahrenheit of type int [line: 2]
.   Child: 0  Const 451 [line: 2]
Sibling: 1  Func: carbon returns type int [line: 4]
.   Child: 1  Compound [line: 4]
.   .   Child: 1  Return [line: 4]
.   .   .   Child: 0  Const 6 [line: 4]
Sibling: 2  Func: fred returns type void [line: 6]
.   Child: 0  Parm: a of type int [line: 6]
.   Sibling: 1  Parm: b of type int [line: 6]
.   Sibling: 2  Parm: c of type char [line: 6]
.   Sibling: 3  Parm: d is array of type char [line: 6]
.   Sibling: 4  Parm: e of type bool [line: 6]
.   Sibling: 5  Parm: f is array of type bool [line: 6]
.   Child: 1  Compound [line: 6]
.   .   Child: 1  For [line: 7]
.   .   .   Child: 0  Var: x of type int [line: 7]
.   .   .   Child: 1  Range [line: 7]
.   .   .   .   Child: 0  Const 1 [line: 7]
.   .   .   .   Child: 1  Const 10 [line: 7]
.   .   .   .   Child: 2  Const 3 [line: 7]
.   .   .   Child: 2  Compound [line: 7]
.   .   .   .   Child: 1  While [line: 8]
.   .   .   .   .   Child: 0  Op: > [line: 8]
.   .   .   .   .   .   Child: 0  Id: x [line: 8]
.   .   .   .   .   .   Child: 1  Const 3 [line: 8]
.   .   .   .   .   Child: 1  Compound [line: 8]
.   .   .   .   .   .   Child: 1  If [line: 9]
.   .   .   .   .   .   .   Child: 0  Op: < [line: 9]
.   .   .   .   .   .   .   .   Child: 0  Id: x [line: 9]
.   .   .   .   .   .   .   .   Child: 1  Const 5 [line: 9]
.   .   .   .   .   .   .   Child: 1  Return [line: 9]
.   .   .   .   .   .   .   Child: 2  Break [line: 10]
.   .   .   .   .   .   Sibling: 1  If [line: 11]
.   .   .   .   .   .   .   Child: 0  Const true [line: 11]
.   .   .   .   .   .   .   Child: 1  If [line: 11]
.   .   .   .   .   .   .   .   Child: 0  Op: == [line: 11]
.   .   .   .   .   .   .   .   .   Child: 0  Id: c [line: 11]
.   .   .   .   .   .   .   .   .   Child: 1  Const 'a' [line: 11]
.   .   .   .   .   .   .   .   Child: 1  Const 666 [line: 11]
.   .   .   .   .   .   .   .   Child: 2  Const 777 [line: 11]
.   .   .   .   .   .   Sibling: 2  Assign: = [line: 12]
.   .   .   .   .   .   .   Child: 0  Id: a [line: 12]
.   .   .   .   .   .   .   Child: 1  Assign: += [line: 12]
.   .   .   .   .   .   .   .   Child: 0  Id: b [line: 12]
.   .   .   .   .   .   .   .   Child: 1  Const 3 [line: 12]
.   .   .   .   .   .   Sibling: 3  Assign: *= [line: 13]
.   .   .   .   .   .   .   Child: 0  Id: a [line: 13]
.   .   .   .   .   .   .   Child: 1  Assign: /= [line: 13]
.   .   .   .   .   .   .   .   Child: 0  Id: b [line: 13]
.   .   .   .   .   .   .   .   Child: 1  Const 4 [line: 13]
.   .   .   .   .   .   Sibling: 4  Assign: ++ [line: 14]
.   .   .   .   .   .   .   Child: 0  Id: a [line: 14]
.   .   .   .   .   .   Sibling: 5  Assign: = [line: 15]
.   .   .   .   .   .   .   Child: 0  Id: e [line: 15]
.   .   .   .   .   .   .   Child: 1  Op: or [line: 15]
.   .   .   .   .   .   .   .   Child: 0  Const true [line: 15]
.   .   .   .   .   .   .   .   Child: 1  Op: and [line: 15]
.   .   .   .   .   .   .   .   .   Child: 0  Const false [line: 15]
.   .   .   .   .   .   .   .   .   Child: 1  Op: not [line: 15]
.   .   .   .   .   .   .   .   .   .   Child: 0  Const false [line: 15]
.   .   .   .   .   .   Sibling: 6  Assign: -= [line: 16]
.   .   .   .   .   .   .   Child: 0  Id: b [line: 16]
.   .   .   .   .   .   .   Child: 1  Op: % [line: 16]
.   .   .   .   .   .   .   .   Child: 0  Op: / [line: 16]
.   .   .   .   .   .   .   .   .   Child: 0  Op: * [line: 16]
.   .   .   .   .   .   .   .   .   .   Child: 0  Id: a [line: 16]
.   .   .   .   .   .   .   .   .   .   Child: 1  Id: b [line: 16]
.   .   .   .   .   .   .   .   .   Child: 1  Const 5 [line: 16]
.   .   .   .   .   .   .   .   Child: 1  Const 13 [line: 16]
.   .   .   .   .   .   Sibling: 7  Assign: -- [line: 17]
.   .   .   .   .   .   .   Child: 0  Id: b [line: 17]
.   .   .   .   .   .   Sibling: 8  Op: chsign [line: 18]
.   .   .   .   .   .   .   Child: 0  Op: chsign [line: 18]
.   .   .   .   .   .   .   .   Child: 0  Id: b [line: 18]
.   .   .   .   .   .   Sibling: 9  Assign: -- [line: 19]
.   .   .   .   .   .   .   Child: 0  Id: c [line: 19]
.   .   .   .   .   .   Sibling: 10  Op: ? [line: 20]
.   .   .   .   .   .   .   Child: 0  Id: c [line: 20]
.   .   .   .   .   .   Sibling: 11  Op: ? [line: 21]
.   .   .   .   .   .   .   Child: 0  Op: sizeof [line: 21]
.   .   .   .   .   .   .   .   Child: 0  Id: f [line: 21]
.   .   .   .   .   .   Sibling: 12  Op: + [line: 22]
.   .   .   .   .   .   .   Child: 0  Op: [ [line: 22]
.   .   .   .   .   .   .   .   Child: 0  Id: e [line: 22]
.   .   .   .   .   .   .   .   Child: 1  Const 5 [line: 22]
.   .   .   .   .   .   .   Child: 1  Op: [ [line: 22]
.   .   .   .   .   .   .   .   Child: 0  Id: e [line: 22]
.   .   .   .   .   .   .   .   Child: 1  Const 6 [line: 22]
.   .   .   .   .   .   Sibling: 13  Op: [ [line: 23]
.   .   .   .   .   .   .   Child: 0  Id: e [line: 23]
.   .   .   .   .   .   .   Child: 1  Op: [ [line: 23]
.   .   .   .   .   .   .   .   Child: 0  Id: e [line: 23]
.   .   .   .   .   .   .   .   Child: 1  Const 0 [line: 23]
.   .   .   .   .   .   Sibling: 14  Assign: = [line: 24]
.   .   .   .   .   .   .   Child: 0  Id: c [line: 24]
.   .   .   .   .   .   .   Child: 1  Const 'x' [line: 24]
.   .   .   .   .   .   Sibling: 15  Assign: = [line: 25]
.   .   .   .   .   .   .   Child: 0  Id: d [line: 25]
.   .   .   .   .   .   .   Child: 1  Const is array "horses" [line: 25]
.   .   .   .   .   .   Sibling: 16  Op: and [line: 26]
.   .   .   .   .   .   .   Child: 0  Op: + [line: 26]
.   .   .   .   .   .   .   .   Child: 0  Id: a [line: 26]
.   .   .   .   .   .   .   .   Child: 1  Id: a [line: 26]
.   .   .   .   .   .   .   Child: 1  Op: * [line: 26]
.   .   .   .   .   .   .   .   Child: 0  Const 2 [line: 26]
.   .   .   .   .   .   .   .   Child: 1  Id: a [line: 26]
.   .   .   .   .   .   Sibling: 17  Call: carbon [line: 27]
.   .   .   .   .   .   Sibling: 18  Return [line: 28]
.   .   Sibling: 1  For [line: 31]
.   .   .   Child: 0  Var: i of type int [line: 31]
.   .   .   Child: 1  Range [line: 31]
.   .   .   .   Child: 0  Const 1 [line: 31]
.   .   .   .   Child: 1  Const 107 [line: 31]
.   .   .   Child: 2  Compound [line: 31]
.   .   .   .   Child: 0  Var: x of type int [line: 31]
Sibling: 3  Func: main returns type void [line: 34]
.   Child: 1  Compound [line: 34]
.   .   Child: 0  Var: a of type int [line: 35]
.   .   Sibling: 1  Var: b is array of type int [line: 35]
.   .   Sibling: 2  Var: c of type char [line: 36]
.   .   Sibling: 3  Var: d is array of type char [line: 36]
.   .   Sibling: 4  Var: e of type bool [line: 37]
.   .   Sibling: 5  Var: f is array of type bool [line: 37]
.   .   Sibling: 6  Var: g of type int [line: 38]
.   .   Child: 1  Call: fred [line: 39]
.   .   .   Child: 0  Const 101 [line: 39]
.   .   .   Sibling: 1  Id: b [line: 39]
.   .   .   Sibling: 2  Const 'q' [line: 39]
.   .   .   Sibling: 3  Id: d [line: 39]
.   .   .   Sibling: 4  Id: e [line: 39]
.   .   .   Sibling: 5  Id: f [line: 39]
ERROR(19): Unary '--' requires an operand of type int but was given type char.
ERROR(20): Unary '?' requires an operand of type int but was given type char.
ERROR(22): Cannot index nonarray 'e'.
ERROR(22): Cannot index nonarray 'e'.
ERROR(22): '+' requires operands of type int but lhs is of type bool.
ERROR(22): '+' requires operands of type int but rhs is of type bool.
ERROR(23): Cannot index nonarray 'e'.
ERROR(23): Cannot index nonarray 'e'.
ERROR(23): Array 'e' should be indexed by type int but got type bool.
ERROR(26): 'and' requires operands of type bool but lhs is of type int.
ERROR(26): 'and' requires operands of type bool but rhs is of type int.
WARNING(31): The variable 'i' seems not to be used.
WARNING(31): The variable 'x' seems not to be used.
WARNING(39): Variable 'b' may be uninitialized when used here.
WARNING(39): Variable 'd' may be uninitialized when used here.
WARNING(39): Variable 'e' may be uninitialized when used here.
WARNING(39): Variable 'f' may be uninitialized when used here.
WARNING(35): The variable 'a' seems not to be used.
WARNING(36): The variable 'c' seems not to be used.
WARNING(38): The variable 'g' seems not to be used.
Number of warnings: 9
Number of errors: 11
