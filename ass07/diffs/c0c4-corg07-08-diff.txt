SCRIPT RUNNING WITH "c0c4"
// C-F22
main()
{
    static char x;
    static char y;
    static char z;

    x = 'A';
    y = 'B';
    outputc(x);
    outputc(y);
    outputc(z = x = y);
    outputc(x);
    outputc(y);
    outputc(z);
    outnl();
}
---- MEM DIFF ----
Func: input returns type int [mem: Global loc: 0 size: -2] [line: -1]					Func: input returns type int [mem: Global loc: 0 size: -2] [line: -1]
Sibling: 1  Func: output returns type void [mem: Global loc: 0 size: -3] [line: -1]			Sibling: 1  Func: output returns type void [mem: Global loc: 0 size: -3] [line: -1]
.   Child: 0  Parm: *dummy* of type int [mem: Parameter loc: -2 size: 1] [line: -1]			.   Child: 0  Parm: *dummy* of type int [mem: Parameter loc: -2 size: 1] [line: -1]
Sibling: 2  Func: inputb returns type bool [mem: Global loc: 0 size: -2] [line: -1]			Sibling: 2  Func: inputb returns type bool [mem: Global loc: 0 size: -2] [line: -1]
Sibling: 3  Func: outputb returns type void [mem: Global loc: 0 size: -3] [line: -1]			Sibling: 3  Func: outputb returns type void [mem: Global loc: 0 size: -3] [line: -1]
.   Child: 0  Parm: *dummy* of type bool [mem: Parameter loc: -2 size: 1] [line: -1]			.   Child: 0  Parm: *dummy* of type bool [mem: Parameter loc: -2 size: 1] [line: -1]
Sibling: 4  Func: inputc returns type char [mem: Global loc: 0 size: -2] [line: -1]			Sibling: 4  Func: inputc returns type char [mem: Global loc: 0 size: -2] [line: -1]
Sibling: 5  Func: outputc returns type void [mem: Global loc: 0 size: -3] [line: -1]			Sibling: 5  Func: outputc returns type void [mem: Global loc: 0 size: -3] [line: -1]
.   Child: 0  Parm: *dummy* of type char [mem: Parameter loc: -2 size: 1] [line: -1]			.   Child: 0  Parm: *dummy* of type char [mem: Parameter loc: -2 size: 1] [line: -1]
Sibling: 6  Func: outnl returns type void [mem: Global loc: 0 size: -2] [line: -1]			Sibling: 6  Func: outnl returns type void [mem: Global loc: 0 size: -2] [line: -1]
Sibling: 7  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]			Sibling: 7  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 3]						.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 3]
.   .   Child: 0  Var: x of static type char [mem: LocalStatic loc: 0 size: 1] [line: 4]		.   .   Child: 0  Var: x of static type char [mem: LocalStatic loc: 0 size: 1] [line: 4]
.   .   Sibling: 1  Var: y of static type char [mem: LocalStatic loc: -1 size: 1] [line: 5]		.   .   Sibling: 1  Var: y of static type char [mem: LocalStatic loc: -1 size: 1] [line: 5]
.   .   Sibling: 2  Var: z of static type char [mem: LocalStatic loc: -2 size: 1] [line: 6]		.   .   Sibling: 2  Var: z of static type char [mem: LocalStatic loc: -2 size: 1] [line: 6]
.   .   Child: 1  Assign: := of type char [line: 8]							.   .   Child: 1  Assign: := of type char [line: 8]
.   .   .   Child: 0  Id: x of static type char [mem: LocalStatic loc: 0 size: 1] [line: 8]		.   .   .   Child: 0  Id: x of static type char [mem: LocalStatic loc: 0 size: 1] [line: 8]
.   .   .   Child: 1  Const 'A' of type char [line: 8]							.   .   .   Child: 1  Const 'A' of type char [line: 8]
.   .   Sibling: 1  Assign: := of type char [line: 9]							.   .   Sibling: 1  Assign: := of type char [line: 9]
.   .   .   Child: 0  Id: y of static type char [mem: LocalStatic loc: -1 size: 1] [line: 9]		.   .   .   Child: 0  Id: y of static type char [mem: LocalStatic loc: -1 size: 1] [line: 9]
.   .   .   Child: 1  Const 'B' of type char [line: 9]							.   .   .   Child: 1  Const 'B' of type char [line: 9]
.   .   Sibling: 2  Call: outputc of type void [line: 10]						.   .   Sibling: 2  Call: outputc of type void [line: 10]
.   .   .   Child: 0  Id: x of static type char [mem: LocalStatic loc: 0 size: 1] [line: 10]		.   .   .   Child: 0  Id: x of static type char [mem: LocalStatic loc: 0 size: 1] [line: 10]
.   .   Sibling: 3  Call: outputc of type void [line: 11]						.   .   Sibling: 3  Call: outputc of type void [line: 11]
.   .   .   Child: 0  Id: y of static type char [mem: LocalStatic loc: -1 size: 1] [line: 11]		.   .   .   Child: 0  Id: y of static type char [mem: LocalStatic loc: -1 size: 1] [line: 11]
.   .   Sibling: 4  Call: outputc of type void [line: 12]						.   .   Sibling: 4  Call: outputc of type void [line: 12]
.   .   .   Child: 0  Assign: := of type char [line: 12]						.   .   .   Child: 0  Assign: := of type char [line: 12]
.   .   .   .   Child: 0  Id: z of static type char [mem: LocalStatic loc: -2 size: 1] [line: 12	.   .   .   .   Child: 0  Id: z of static type char [mem: LocalStatic loc: -2 size: 1] [line: 12
.   .   .   .   Child: 1  Assign: := of type char [line: 12]						.   .   .   .   Child: 1  Assign: := of type char [line: 12]
.   .   .   .   .   Child: 0  Id: x of static type char [mem: LocalStatic loc: 0 size: 1] [line:	.   .   .   .   .   Child: 0  Id: x of static type char [mem: LocalStatic loc: 0 size: 1] [line:
.   .   .   .   .   Child: 1  Id: y of static type char [mem: LocalStatic loc: -1 size: 1] [line	.   .   .   .   .   Child: 1  Id: y of static type char [mem: LocalStatic loc: -1 size: 1] [line
.   .   Sibling: 5  Call: outputc of type void [line: 13]						.   .   Sibling: 5  Call: outputc of type void [line: 13]
.   .   .   Child: 0  Id: x of static type char [mem: LocalStatic loc: 0 size: 1] [line: 13]		.   .   .   Child: 0  Id: x of static type char [mem: LocalStatic loc: 0 size: 1] [line: 13]
.   .   Sibling: 6  Call: outputc of type void [line: 14]						.   .   Sibling: 6  Call: outputc of type void [line: 14]
.   .   .   Child: 0  Id: y of static type char [mem: LocalStatic loc: -1 size: 1] [line: 14]		.   .   .   Child: 0  Id: y of static type char [mem: LocalStatic loc: -1 size: 1] [line: 14]
.   .   Sibling: 7  Call: outputc of type void [line: 15]						.   .   Sibling: 7  Call: outputc of type void [line: 15]
.   .   .   Child: 0  Id: z of static type char [mem: LocalStatic loc: -2 size: 1] [line: 15]		.   .   .   Child: 0  Id: z of static type char [mem: LocalStatic loc: -2 size: 1] [line: 15]
.   .   Sibling: 8  Call: outnl of type void [line: 16]							.   .   Sibling: 8  Call: outnl of type void [line: 16]
Offset for end of global space: -3									Offset for end of global space: -3
Number of warnings: 0											Number of warnings: 0
Number of errors: 0											Number of errors: 0
---- TMCODE DIFF ----
* C- compiler version C-S21										* C- compiler version C-S21
* Built: Mon Nov 28 11:55:09 2022								   |	* Built: Apr 18, 2021 (toffset telemetry)
* Author: Ethan Corgatelli									   |	* Author: Robert B. Heckendorn
* File compiled: c0c4.c-									   |	* File compiled:  c0c4.c-
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION input											* FUNCTION input
  1:     ST  3,-1(1)	Store return address 								  1:     ST  3,-1(1)	Store return address 
  2:     IN  2,2,2	Grab int input 									  2:     IN  2,2,2	Grab int input 
  3:     LD  3,-1(1)	Load return address 								  3:     LD  3,-1(1)	Load return address 
  4:     LD  1,0(1)	Adjust fp 									  4:     LD  1,0(1)	Adjust fp 
  5:    JMP  7,0(3)	Return 										  5:    JMP  7,0(3)	Return 
* END FUNCTION input											* END FUNCTION input
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION output											* FUNCTION output
  6:     ST  3,-1(1)	Store return address 								  6:     ST  3,-1(1)	Store return address 
  7:     LD  3,-2(1)	Load parameter 									  7:     LD  3,-2(1)	Load parameter 
  8:    OUT  3,3,3	Output integer 									  8:    OUT  3,3,3	Output integer 
  9:     LD  3,-1(1)	Load return address 								  9:     LD  3,-1(1)	Load return address 
 10:     LD  1,0(1)	Adjust fp 									 10:     LD  1,0(1)	Adjust fp 
 11:    JMP  7,0(3)	Return 										 11:    JMP  7,0(3)	Return 
* END FUNCTION output											* END FUNCTION output
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION inputb											* FUNCTION inputb
 12:     ST  3,-1(1)	Store return address 								 12:     ST  3,-1(1)	Store return address 
 13:    INB  2,2,2	Grab bool input 								 13:    INB  2,2,2	Grab bool input 
 14:     LD  3,-1(1)	Load return address 								 14:     LD  3,-1(1)	Load return address 
 15:     LD  1,0(1)	Adjust fp 									 15:     LD  1,0(1)	Adjust fp 
 16:    JMP  7,0(3)	Return 										 16:    JMP  7,0(3)	Return 
* END FUNCTION inputb											* END FUNCTION inputb
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION outputb											* FUNCTION outputb
 17:     ST  3,-1(1)	Store return address 								 17:     ST  3,-1(1)	Store return address 
 18:     LD  3,-2(1)	Load parameter 									 18:     LD  3,-2(1)	Load parameter 
 19:   OUTB  3,3,3	Output bool 									 19:   OUTB  3,3,3	Output bool 
 20:     LD  3,-1(1)	Load return address 								 20:     LD  3,-1(1)	Load return address 
 21:     LD  1,0(1)	Adjust fp 									 21:     LD  1,0(1)	Adjust fp 
 22:    JMP  7,0(3)	Return 										 22:    JMP  7,0(3)	Return 
* END FUNCTION outputb											* END FUNCTION outputb
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION inputc											* FUNCTION inputc
 23:     ST  3,-1(1)	Store return address 								 23:     ST  3,-1(1)	Store return address 
 24:    INC  2,2,2	Grab char input 								 24:    INC  2,2,2	Grab char input 
 25:     LD  3,-1(1)	Load return address 								 25:     LD  3,-1(1)	Load return address 
 26:     LD  1,0(1)	Adjust fp 									 26:     LD  1,0(1)	Adjust fp 
 27:    JMP  7,0(3)	Return 										 27:    JMP  7,0(3)	Return 
* END FUNCTION inputc											* END FUNCTION inputc
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION outputc											* FUNCTION outputc
 28:     ST  3,-1(1)	Store return address 								 28:     ST  3,-1(1)	Store return address 
 29:     LD  3,-2(1)	Load parameter 									 29:     LD  3,-2(1)	Load parameter 
 30:   OUTC  3,3,3	Output char 									 30:   OUTC  3,3,3	Output char 
 31:     LD  3,-1(1)	Load return address 								 31:     LD  3,-1(1)	Load return address 
 32:     LD  1,0(1)	Adjust fp 									 32:     LD  1,0(1)	Adjust fp 
 33:    JMP  7,0(3)	Return 										 33:    JMP  7,0(3)	Return 
* END FUNCTION outputc											* END FUNCTION outputc
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION outnl											* FUNCTION outnl
 34:     ST  3,-1(1)	Store return address 								 34:     ST  3,-1(1)	Store return address 
 35:  OUTNL  3,3,3	Output a newline 								 35:  OUTNL  3,3,3	Output a newline 
 36:     LD  3,-1(1)	Load return address 								 36:     LD  3,-1(1)	Load return address 
 37:     LD  1,0(1)	Adjust fp 									 37:     LD  1,0(1)	Adjust fp 
 38:    JMP  7,0(3)	Return 										 38:    JMP  7,0(3)	Return 
* END FUNCTION outnl											* END FUNCTION outnl
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION main												* FUNCTION main
* TOFF set: -2												* TOFF set: -2
 39:     ST  3,-1(1)	Store return address 								 39:     ST  3,-1(1)	Store return address 
* COMPOUND												* COMPOUND
* TOFF set: -2												* TOFF set: -2
* Compound Body												* Compound Body
* EXPRESSION												* EXPRESSION
 40:    LDC  3,65(6)	Load char constant 								 40:    LDC  3,65(6)	Load char constant 
 41:     ST  3,0(0)	Store variable x								 41:     ST  3,0(0)	Store variable x
* EXPRESSION												* EXPRESSION
 42:    LDC  3,66(6)	Load char constant 								 42:    LDC  3,66(6)	Load char constant 
 43:     ST  3,-1(0)	Store variable y								 43:     ST  3,-1(0)	Store variable y
* EXPRESSION												* EXPRESSION
* CALL outputc												* CALL outputc
 44:     ST  1,-2(1)	Store fp in ghost frame for outputc						 44:     ST  1,-2(1)	Store fp in ghost frame for outputc
* TOFF dec: -3												* TOFF dec: -3
* TOFF dec: -4												* TOFF dec: -4
* Param 1												* Param 1
 45:     LD  3,0(0)	Load variable x									 45:     LD  3,0(0)	Load variable x
 46:     ST  3,-4(1)	Push parameter 									 46:     ST  3,-4(1)	Push parameter 
* TOFF dec: -5												* TOFF dec: -5
* Param end outputc											* Param end outputc
 47:    LDA  1,-2(1)	Ghost frame becomes new active frame 						 47:    LDA  1,-2(1)	Ghost frame becomes new active frame 
 48:    LDA  3,1(7)	Return address in ac 								 48:    LDA  3,1(7)	Return address in ac 
 49:    JMP  7,-22(7)	CALL outputc									 49:    JMP  7,-22(7)	CALL outputc
 50:    LDA  3,0(2)	Save the result in ac 								 50:    LDA  3,0(2)	Save the result in ac 
* Call end outputc											* Call end outputc
* TOFF set: -2												* TOFF set: -2
* EXPRESSION												* EXPRESSION
* CALL outputc												* CALL outputc
 51:     ST  1,-2(1)	Store fp in ghost frame for outputc						 51:     ST  1,-2(1)	Store fp in ghost frame for outputc
* TOFF dec: -3												* TOFF dec: -3
* TOFF dec: -4												* TOFF dec: -4
* Param 1												* Param 1
 52:     LD  3,-1(0)	Load variable y									 52:     LD  3,-1(0)	Load variable y
 53:     ST  3,-4(1)	Push parameter 									 53:     ST  3,-4(1)	Push parameter 
* TOFF dec: -5												* TOFF dec: -5
* Param end outputc											* Param end outputc
 54:    LDA  1,-2(1)	Ghost frame becomes new active frame 						 54:    LDA  1,-2(1)	Ghost frame becomes new active frame 
 55:    LDA  3,1(7)	Return address in ac 								 55:    LDA  3,1(7)	Return address in ac 
 56:    JMP  7,-29(7)	CALL outputc									 56:    JMP  7,-29(7)	CALL outputc
 57:    LDA  3,0(2)	Save the result in ac 								 57:    LDA  3,0(2)	Save the result in ac 
* Call end outputc											* Call end outputc
* TOFF set: -2												* TOFF set: -2
* EXPRESSION												* EXPRESSION
* CALL outputc												* CALL outputc
 58:     ST  1,-2(1)	Store fp in ghost frame for outputc						 58:     ST  1,-2(1)	Store fp in ghost frame for outputc
* TOFF dec: -3												* TOFF dec: -3
* TOFF dec: -4												* TOFF dec: -4
* Param 1												* Param 1
 59:     LD  3,-1(0)	Load variable y									 59:     LD  3,-1(0)	Load variable y
 60:     ST  3,0(0)	Store variable x								 60:     ST  3,0(0)	Store variable x
 61:     ST  3,-2(0)	Store variable z								 61:     ST  3,-2(0)	Store variable z
 62:     ST  3,-4(1)	Push parameter 									 62:     ST  3,-4(1)	Push parameter 
* TOFF dec: -5												* TOFF dec: -5
* Param end outputc											* Param end outputc
 63:    LDA  1,-2(1)	Ghost frame becomes new active frame 						 63:    LDA  1,-2(1)	Ghost frame becomes new active frame 
 64:    LDA  3,1(7)	Return address in ac 								 64:    LDA  3,1(7)	Return address in ac 
 65:    JMP  7,-38(7)	CALL outputc									 65:    JMP  7,-38(7)	CALL outputc
 66:    LDA  3,0(2)	Save the result in ac 								 66:    LDA  3,0(2)	Save the result in ac 
* Call end outputc											* Call end outputc
* TOFF set: -2												* TOFF set: -2
* EXPRESSION												* EXPRESSION
* CALL outputc												* CALL outputc
 67:     ST  1,-2(1)	Store fp in ghost frame for outputc						 67:     ST  1,-2(1)	Store fp in ghost frame for outputc
* TOFF dec: -3												* TOFF dec: -3
* TOFF dec: -4												* TOFF dec: -4
* Param 1												* Param 1
 68:     LD  3,0(0)	Load variable x									 68:     LD  3,0(0)	Load variable x
 69:     ST  3,-4(1)	Push parameter 									 69:     ST  3,-4(1)	Push parameter 
* TOFF dec: -5												* TOFF dec: -5
* Param end outputc											* Param end outputc
 70:    LDA  1,-2(1)	Ghost frame becomes new active frame 						 70:    LDA  1,-2(1)	Ghost frame becomes new active frame 
 71:    LDA  3,1(7)	Return address in ac 								 71:    LDA  3,1(7)	Return address in ac 
 72:    JMP  7,-45(7)	CALL outputc									 72:    JMP  7,-45(7)	CALL outputc
 73:    LDA  3,0(2)	Save the result in ac 								 73:    LDA  3,0(2)	Save the result in ac 
* Call end outputc											* Call end outputc
* TOFF set: -2												* TOFF set: -2
* EXPRESSION												* EXPRESSION
* CALL outputc												* CALL outputc
 74:     ST  1,-2(1)	Store fp in ghost frame for outputc						 74:     ST  1,-2(1)	Store fp in ghost frame for outputc
* TOFF dec: -3												* TOFF dec: -3
* TOFF dec: -4												* TOFF dec: -4
* Param 1												* Param 1
 75:     LD  3,-1(0)	Load variable y									 75:     LD  3,-1(0)	Load variable y
 76:     ST  3,-4(1)	Push parameter 									 76:     ST  3,-4(1)	Push parameter 
* TOFF dec: -5												* TOFF dec: -5
* Param end outputc											* Param end outputc
 77:    LDA  1,-2(1)	Ghost frame becomes new active frame 						 77:    LDA  1,-2(1)	Ghost frame becomes new active frame 
 78:    LDA  3,1(7)	Return address in ac 								 78:    LDA  3,1(7)	Return address in ac 
 79:    JMP  7,-52(7)	CALL outputc									 79:    JMP  7,-52(7)	CALL outputc
 80:    LDA  3,0(2)	Save the result in ac 								 80:    LDA  3,0(2)	Save the result in ac 
* Call end outputc											* Call end outputc
* TOFF set: -2												* TOFF set: -2
* EXPRESSION												* EXPRESSION
* CALL outputc												* CALL outputc
 81:     ST  1,-2(1)	Store fp in ghost frame for outputc						 81:     ST  1,-2(1)	Store fp in ghost frame for outputc
* TOFF dec: -3												* TOFF dec: -3
* TOFF dec: -4												* TOFF dec: -4
* Param 1												* Param 1
 82:     LD  3,-2(0)	Load variable z									 82:     LD  3,-2(0)	Load variable z
 83:     ST  3,-4(1)	Push parameter 									 83:     ST  3,-4(1)	Push parameter 
* TOFF dec: -5												* TOFF dec: -5
* Param end outputc											* Param end outputc
 84:    LDA  1,-2(1)	Ghost frame becomes new active frame 						 84:    LDA  1,-2(1)	Ghost frame becomes new active frame 
 85:    LDA  3,1(7)	Return address in ac 								 85:    LDA  3,1(7)	Return address in ac 
 86:    JMP  7,-59(7)	CALL outputc									 86:    JMP  7,-59(7)	CALL outputc
 87:    LDA  3,0(2)	Save the result in ac 								 87:    LDA  3,0(2)	Save the result in ac 
* Call end outputc											* Call end outputc
* TOFF set: -2												* TOFF set: -2
* EXPRESSION												* EXPRESSION
* CALL outnl												* CALL outnl
 88:     ST  1,-2(1)	Store fp in ghost frame for outnl						 88:     ST  1,-2(1)	Store fp in ghost frame for outnl
* TOFF dec: -3												* TOFF dec: -3
* TOFF dec: -4												* TOFF dec: -4
* Param end outnl											* Param end outnl
 89:    LDA  1,-2(1)	Ghost frame becomes new active frame 						 89:    LDA  1,-2(1)	Ghost frame becomes new active frame 
 90:    LDA  3,1(7)	Return address in ac 								 90:    LDA  3,1(7)	Return address in ac 
 91:    JMP  7,-58(7)	CALL outnl									 91:    JMP  7,-58(7)	CALL outnl
 92:    LDA  3,0(2)	Save the result in ac 								 92:    LDA  3,0(2)	Save the result in ac 
* Call end outnl											* Call end outnl
* TOFF set: -2												* TOFF set: -2
* TOFF set: -2												* TOFF set: -2
* END COMPOUND												* END COMPOUND
* Add standard closing in case there is no return statement						* Add standard closing in case there is no return statement
 93:    LDC  2,0(6)	Set return value to 0 								 93:    LDC  2,0(6)	Set return value to 0 
 94:     LD  3,-1(1)	Load return address 								 94:     LD  3,-1(1)	Load return address 
 95:     LD  1,0(1)	Adjust fp 									 95:     LD  1,0(1)	Adjust fp 
 96:    JMP  7,0(3)	Return 										 96:    JMP  7,0(3)	Return 
* END FUNCTION main											* END FUNCTION main
  0:    JMP  7,96(7)	Jump to init [backpatch] 							  0:    JMP  7,96(7)	Jump to init [backpatch] 
* INIT													* INIT
 97:    LDA  1,-3(0)	set first frame at end of globals 						 97:    LDA  1,-3(0)	set first frame at end of globals 
 98:     ST  1,0(1)	store old fp (point to self) 							 98:     ST  1,0(1)	store old fp (point to self) 
* INIT GLOBALS AND STATICS										* INIT GLOBALS AND STATICS
* END INIT GLOBALS AND STATICS										* END INIT GLOBALS AND STATICS
 99:    LDA  3,1(7)	Return address in ac 								 99:    LDA  3,1(7)	Return address in ac 
100:    JMP  7,-62(7)	Jump to main 									100:    JMP  7,-62(7)	Jump to main 
101:   HALT  0,0,0	DONE! 										101:   HALT  0,0,0	DONE! 
* END INIT												* END INIT
