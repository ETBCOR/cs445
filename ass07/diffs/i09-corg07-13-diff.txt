SCRIPT RUNNING WITH "i09"
// C-F22
main(){
    int kk:4*5+3*2, ll:-46;
    output(kk);
    {
    }
}
---- MEM DIFF ----
WARNING(3): The variable 'll' seems not to be used.							WARNING(3): The variable 'll' seems not to be used.
Func: input returns type int [mem: Global loc: 0 size: -2] [line: -1]					Func: input returns type int [mem: Global loc: 0 size: -2] [line: -1]
Sibling: 1  Func: output returns type void [mem: Global loc: 0 size: -3] [line: -1]			Sibling: 1  Func: output returns type void [mem: Global loc: 0 size: -3] [line: -1]
.   Child: 0  Parm: *dummy* of type int [mem: Parameter loc: -2 size: 1] [line: -1]			.   Child: 0  Parm: *dummy* of type int [mem: Parameter loc: -2 size: 1] [line: -1]
Sibling: 2  Func: inputb returns type bool [mem: Global loc: 0 size: -2] [line: -1]			Sibling: 2  Func: inputb returns type bool [mem: Global loc: 0 size: -2] [line: -1]
Sibling: 3  Func: outputb returns type void [mem: Global loc: 0 size: -3] [line: -1]			Sibling: 3  Func: outputb returns type void [mem: Global loc: 0 size: -3] [line: -1]
.   Child: 0  Parm: *dummy* of type bool [mem: Parameter loc: -2 size: 1] [line: -1]			.   Child: 0  Parm: *dummy* of type bool [mem: Parameter loc: -2 size: 1] [line: -1]
Sibling: 4  Func: inputc returns type char [mem: Global loc: 0 size: -2] [line: -1]			Sibling: 4  Func: inputc returns type char [mem: Global loc: 0 size: -2] [line: -1]
Sibling: 5  Func: outputc returns type void [mem: Global loc: 0 size: -3] [line: -1]			Sibling: 5  Func: outputc returns type void [mem: Global loc: 0 size: -3] [line: -1]
.   Child: 0  Parm: *dummy* of type char [mem: Parameter loc: -2 size: 1] [line: -1]			.   Child: 0  Parm: *dummy* of type char [mem: Parameter loc: -2 size: 1] [line: -1]
Sibling: 6  Func: outnl returns type void [mem: Global loc: 0 size: -2] [line: -1]			Sibling: 6  Func: outnl returns type void [mem: Global loc: 0 size: -2] [line: -1]
Sibling: 7  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]			Sibling: 7  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 2]						.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 2]
.   .   Child: 0  Var: kk of type int [mem: Local loc: -2 size: 1] [line: 3]				.   .   Child: 0  Var: kk of type int [mem: Local loc: -2 size: 1] [line: 3]
.   .   .   Child: 0  Op: + of type int [line: 3]							.   .   .   Child: 0  Op: + of type int [line: 3]
.   .   .   .   Child: 0  Op: * of type int [line: 3]							.   .   .   .   Child: 0  Op: * of type int [line: 3]
.   .   .   .   .   Child: 0  Const 4 of type int [line: 3]						.   .   .   .   .   Child: 0  Const 4 of type int [line: 3]
.   .   .   .   .   Child: 1  Const 5 of type int [line: 3]						.   .   .   .   .   Child: 1  Const 5 of type int [line: 3]
.   .   .   .   Child: 1  Op: * of type int [line: 3]							.   .   .   .   Child: 1  Op: * of type int [line: 3]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 3]						.   .   .   .   .   Child: 0  Const 3 of type int [line: 3]
.   .   .   .   .   Child: 1  Const 2 of type int [line: 3]						.   .   .   .   .   Child: 1  Const 2 of type int [line: 3]
.   .   Sibling: 1  Var: ll of type int [mem: Local loc: -3 size: 1] [line: 3]				.   .   Sibling: 1  Var: ll of type int [mem: Local loc: -3 size: 1] [line: 3]
.   .   .   Child: 0  Op: chsign of type int [line: 3]							.   .   .   Child: 0  Op: chsign of type int [line: 3]
.   .   .   .   Child: 0  Const 46 of type int [line: 3]						.   .   .   .   Child: 0  Const 46 of type int [line: 3]
.   .   Child: 1  Call: output of type void [line: 4]							.   .   Child: 1  Call: output of type void [line: 4]
.   .   .   Child: 0  Id: kk of type int [mem: Local loc: -2 size: 1] [line: 4]				.   .   .   Child: 0  Id: kk of type int [mem: Local loc: -2 size: 1] [line: 4]
.   .   Sibling: 1  Compound [mem: None loc: 0 size: -4] [line: 5]					.   .   Sibling: 1  Compound [mem: None loc: 0 size: -4] [line: 5]
Offset for end of global space: 0									Offset for end of global space: 0
Number of warnings: 1											Number of warnings: 1
Number of errors: 0											Number of errors: 0
---- TMCODE DIFF ----
* C- compiler version 07-08									   |	* C- compiler version C-S21
* Built: Wed Nov 30 22:42:12 2022								   |	* Built: Apr 18, 2021 (toffset telemetry)
* Author: Ethan Corgatelli									   |	* Author: Robert B. Heckendorn
* File compiled: i09.c-										   |	* File compiled:  i09.c-
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION input											* FUNCTION input
  1:     ST  3,-1(1)	Store return address 								  1:     ST  3,-1(1)	Store return address 
  2:     IN  2,2,2	Grab int input 									  2:     IN  2,2,2	Grab int input 
  3:     LD  3,-1(1)	Load return address 								  3:     LD  3,-1(1)	Load return address 
  4:     LD  1,0(1)	Adjust fp 									  4:     LD  1,0(1)	Adjust fp 
  5:    JMP  7,0(3)	Return 										  5:    JMP  7,0(3)	Return 
* END FUNCTION input											* END FUNCTION input
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION output											* FUNCTION output
  6:     ST  3,-1(1)	Store return address 								  6:     ST  3,-1(1)	Store return address 
  7:     LD  3,-2(1)	Load parameter 									  7:     LD  3,-2(1)	Load parameter 
  8:    OUT  3,3,3	Output integer 									  8:    OUT  3,3,3	Output integer 
  9:     LD  3,-1(1)	Load return address 								  9:     LD  3,-1(1)	Load return address 
 10:     LD  1,0(1)	Adjust fp 									 10:     LD  1,0(1)	Adjust fp 
 11:    JMP  7,0(3)	Return 										 11:    JMP  7,0(3)	Return 
* END FUNCTION output											* END FUNCTION output
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION inputb											* FUNCTION inputb
 12:     ST  3,-1(1)	Store return address 								 12:     ST  3,-1(1)	Store return address 
 13:    INB  2,2,2	Grab bool input 								 13:    INB  2,2,2	Grab bool input 
 14:     LD  3,-1(1)	Load return address 								 14:     LD  3,-1(1)	Load return address 
 15:     LD  1,0(1)	Adjust fp 									 15:     LD  1,0(1)	Adjust fp 
 16:    JMP  7,0(3)	Return 										 16:    JMP  7,0(3)	Return 
* END FUNCTION inputb											* END FUNCTION inputb
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION outputb											* FUNCTION outputb
 17:     ST  3,-1(1)	Store return address 								 17:     ST  3,-1(1)	Store return address 
 18:     LD  3,-2(1)	Load parameter 									 18:     LD  3,-2(1)	Load parameter 
 19:   OUTB  3,3,3	Output bool 									 19:   OUTB  3,3,3	Output bool 
 20:     LD  3,-1(1)	Load return address 								 20:     LD  3,-1(1)	Load return address 
 21:     LD  1,0(1)	Adjust fp 									 21:     LD  1,0(1)	Adjust fp 
 22:    JMP  7,0(3)	Return 										 22:    JMP  7,0(3)	Return 
* END FUNCTION outputb											* END FUNCTION outputb
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION inputc											* FUNCTION inputc
 23:     ST  3,-1(1)	Store return address 								 23:     ST  3,-1(1)	Store return address 
 24:    INC  2,2,2	Grab char input 								 24:    INC  2,2,2	Grab char input 
 25:     LD  3,-1(1)	Load return address 								 25:     LD  3,-1(1)	Load return address 
 26:     LD  1,0(1)	Adjust fp 									 26:     LD  1,0(1)	Adjust fp 
 27:    JMP  7,0(3)	Return 										 27:    JMP  7,0(3)	Return 
* END FUNCTION inputc											* END FUNCTION inputc
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION outputc											* FUNCTION outputc
 28:     ST  3,-1(1)	Store return address 								 28:     ST  3,-1(1)	Store return address 
 29:     LD  3,-2(1)	Load parameter 									 29:     LD  3,-2(1)	Load parameter 
 30:   OUTC  3,3,3	Output char 									 30:   OUTC  3,3,3	Output char 
 31:     LD  3,-1(1)	Load return address 								 31:     LD  3,-1(1)	Load return address 
 32:     LD  1,0(1)	Adjust fp 									 32:     LD  1,0(1)	Adjust fp 
 33:    JMP  7,0(3)	Return 										 33:    JMP  7,0(3)	Return 
* END FUNCTION outputc											* END FUNCTION outputc
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION outnl											* FUNCTION outnl
 34:     ST  3,-1(1)	Store return address 								 34:     ST  3,-1(1)	Store return address 
 35:  OUTNL  3,3,3	Output a newline 								 35:  OUTNL  3,3,3	Output a newline 
 36:     LD  3,-1(1)	Load return address 								 36:     LD  3,-1(1)	Load return address 
 37:     LD  1,0(1)	Adjust fp 									 37:     LD  1,0(1)	Adjust fp 
 38:    JMP  7,0(3)	Return 										 38:    JMP  7,0(3)	Return 
* END FUNCTION outnl											* END FUNCTION outnl
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION main												* FUNCTION main
* TOFF set: -2												* TOFF set: -2
 39:     ST  3,-1(1)	Store return address 								 39:     ST  3,-1(1)	Store return address 
* COMPOUND												* COMPOUND
* TOFF set: -4												* TOFF set: -4
 40:    LDC  3,4(6)	Load integer constant 								 40:    LDC  3,4(6)	Load integer constant 
 41:     ST  3,-4(1)	Push left side 									 41:     ST  3,-4(1)	Push left side 
* TOFF dec: -5												* TOFF dec: -5
 42:    LDC  3,5(6)	Load integer constant 								 42:    LDC  3,5(6)	Load integer constant 
* TOFF inc: -4												* TOFF inc: -4
 43:     LD  4,-4(1)	Pop left into ac1 								 43:     LD  4,-4(1)	Pop left into ac1 
 44:    MUL  3,4,3	Op * 										 44:    MUL  3,4,3	Op * 
 45:     ST  3,-4(1)	Push left side 									 45:     ST  3,-4(1)	Push left side 
* TOFF dec: -5												* TOFF dec: -5
 46:    LDC  3,3(6)	Load integer constant 								 46:    LDC  3,3(6)	Load integer constant 
 47:     ST  3,-5(1)	Push left side 									 47:     ST  3,-5(1)	Push left side 
* TOFF dec: -6												* TOFF dec: -6
 48:    LDC  3,2(6)	Load integer constant 								 48:    LDC  3,2(6)	Load integer constant 
* TOFF inc: -5												* TOFF inc: -5
 49:     LD  4,-5(1)	Pop left into ac1 								 49:     LD  4,-5(1)	Pop left into ac1 
 50:    MUL  3,4,3	Op * 										 50:    MUL  3,4,3	Op * 
* TOFF inc: -4												* TOFF inc: -4
 51:     LD  4,-4(1)	Pop left into ac1 								 51:     LD  4,-4(1)	Pop left into ac1 
 52:    ADD  3,4,3	Op + 										 52:    ADD  3,4,3	Op + 
 53:     ST  3,-2(1)	Store variable kk								 53:     ST  3,-2(1)	Store variable kk
 54:    LDC  3,46(6)	Load integer constant 								 54:    LDC  3,46(6)	Load integer constant 
 55:    NEG  3,3,3	Op chsign 								   |	 55:    NEG  3,3,3	Op unary - 
 56:     ST  3,-3(1)	Store variable ll								 56:     ST  3,-3(1)	Store variable ll
* Compound Body												* Compound Body
* EXPRESSION												* EXPRESSION
* CALL output												* CALL output
 57:     ST  1,-4(1)	Store fp in ghost frame for output						 57:     ST  1,-4(1)	Store fp in ghost frame for output
* TOFF dec: -5												* TOFF dec: -5
* TOFF dec: -6												* TOFF dec: -6
* Param 1												* Param 1
 58:     LD  3,-2(1)	Load variable kk								 58:     LD  3,-2(1)	Load variable kk
 59:     ST  3,-6(1)	Push parameter 									 59:     ST  3,-6(1)	Push parameter 
* TOFF dec: -7												* TOFF dec: -7
* Param end output											* Param end output
 60:    LDA  1,-4(1)	Ghost frame becomes new active frame 						 60:    LDA  1,-4(1)	Ghost frame becomes new active frame 
 61:    LDA  3,1(7)	Return address in ac 								 61:    LDA  3,1(7)	Return address in ac 
 62:    JMP  7,-57(7)	CALL output									 62:    JMP  7,-57(7)	CALL output
 63:    LDA  3,0(2)	Save the result in ac 								 63:    LDA  3,0(2)	Save the result in ac 
* Call end output											* Call end output
* TOFF set: -4												* TOFF set: -4
* COMPOUND												* COMPOUND
* TOFF set: -4												* TOFF set: -4
* Compound Body												* Compound Body
* TOFF set: -4												* TOFF set: -4
* END COMPOUND												* END COMPOUND
* TOFF set: -2												* TOFF set: -2
* END COMPOUND												* END COMPOUND
* Add standard closing in case there is no return statement						* Add standard closing in case there is no return statement
 64:    LDC  2,0(6)	Set return value to 0 								 64:    LDC  2,0(6)	Set return value to 0 
 65:     LD  3,-1(1)	Load return address 								 65:     LD  3,-1(1)	Load return address 
 66:     LD  1,0(1)	Adjust fp 									 66:     LD  1,0(1)	Adjust fp 
 67:    JMP  7,0(3)	Return 										 67:    JMP  7,0(3)	Return 
* END FUNCTION main											* END FUNCTION main
  0:    JMP  7,67(7)	Jump to init [backpatch] 							  0:    JMP  7,67(7)	Jump to init [backpatch] 
* INIT													* INIT
 68:    LDA  1,0(0)	set first frame at end of globals 						 68:    LDA  1,0(0)	set first frame at end of globals 
 69:     ST  1,0(1)	store old fp (point to self) 							 69:     ST  1,0(1)	store old fp (point to self) 
* INIT GLOBALS AND STATICS										* INIT GLOBALS AND STATICS
* END INIT GLOBALS AND STATICS										* END INIT GLOBALS AND STATICS
 70:    LDA  3,1(7)	Return address in ac 								 70:    LDA  3,1(7)	Return address in ac 
 71:    JMP  7,-33(7)	Jump to main 									 71:    JMP  7,-33(7)	Jump to main 
 72:   HALT  0,0,0	DONE! 										 72:   HALT  0,0,0	DONE! 
* END INIT												* END INIT
---- OUTPUT DIFF ----
WARNING(3): The variable 'll' seems not to be used.							WARNING(3): The variable 'll' seems not to be used.
Number of warnings: 1											Number of warnings: 1
Number of errors: 0											Number of errors: 0
Loading file: data/UnitTests/i09.tm								   |	------------------------------------
Enter command: command: a 200000								   |	Loading file: UnitTests/i09.tm
command: o 500											   |	26
command: g											   <
26 												   <
Status: Halted											   <
Last executed cmd:   72: HALT  0,  0, 0  |  r[0]:9999 r[1]:9999 r[2]:0   r[3]:72  r[4]:20  r[5]:   <
PC was 72, PC is now 73										   <
command: x											   <
Bye.													Bye.
