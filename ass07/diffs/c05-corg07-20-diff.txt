SCRIPT RUNNING WITH "c05"
// C-F22
int x[3];
int y[4];

main()
{
    x[2] = 73;
    y[1] = 211;
    output(x[2]+y[1]);
    outnl();
}
---- MEM DIFF ----
Func: input returns type int [mem: Global loc: 0 size: -2] [line: -1]					Func: input returns type int [mem: Global loc: 0 size: -2] [line: -1]
Sibling: 1  Func: output returns type void [mem: Global loc: 0 size: -3] [line: -1]			Sibling: 1  Func: output returns type void [mem: Global loc: 0 size: -3] [line: -1]
.   Child: 0  Parm: *dummy* of type int [mem: Parameter loc: -2 size: 1] [line: -1]			.   Child: 0  Parm: *dummy* of type int [mem: Parameter loc: -2 size: 1] [line: -1]
Sibling: 2  Func: inputb returns type bool [mem: Global loc: 0 size: -2] [line: -1]			Sibling: 2  Func: inputb returns type bool [mem: Global loc: 0 size: -2] [line: -1]
Sibling: 3  Func: outputb returns type void [mem: Global loc: 0 size: -3] [line: -1]			Sibling: 3  Func: outputb returns type void [mem: Global loc: 0 size: -3] [line: -1]
.   Child: 0  Parm: *dummy* of type bool [mem: Parameter loc: -2 size: 1] [line: -1]			.   Child: 0  Parm: *dummy* of type bool [mem: Parameter loc: -2 size: 1] [line: -1]
Sibling: 4  Func: inputc returns type char [mem: Global loc: 0 size: -2] [line: -1]			Sibling: 4  Func: inputc returns type char [mem: Global loc: 0 size: -2] [line: -1]
Sibling: 5  Func: outputc returns type void [mem: Global loc: 0 size: -3] [line: -1]			Sibling: 5  Func: outputc returns type void [mem: Global loc: 0 size: -3] [line: -1]
.   Child: 0  Parm: *dummy* of type char [mem: Parameter loc: -2 size: 1] [line: -1]			.   Child: 0  Parm: *dummy* of type char [mem: Parameter loc: -2 size: 1] [line: -1]
Sibling: 6  Func: outnl returns type void [mem: Global loc: 0 size: -2] [line: -1]			Sibling: 6  Func: outnl returns type void [mem: Global loc: 0 size: -2] [line: -1]
Sibling: 7  Var: x of array of type int [mem: Global loc: -1 size: 4] [line: 2]				Sibling: 7  Var: x of array of type int [mem: Global loc: -1 size: 4] [line: 2]
Sibling: 8  Var: y of array of type int [mem: Global loc: -5 size: 5] [line: 3]				Sibling: 8  Var: y of array of type int [mem: Global loc: -5 size: 5] [line: 3]
Sibling: 9  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 5]			Sibling: 9  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 5]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 6]						.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 6]
.   .   Child: 1  Assign: := of type int [line: 7]							.   .   Child: 1  Assign: := of type int [line: 7]
.   .   .   Child: 0  Op: [ of type int [line: 7]							.   .   .   Child: 0  Op: [ of type int [line: 7]
.   .   .   .   Child: 0  Id: x of array of type int [mem: Global loc: -1 size: 4] [line: 7]		.   .   .   .   Child: 0  Id: x of array of type int [mem: Global loc: -1 size: 4] [line: 7]
.   .   .   .   Child: 1  Const 2 of type int [line: 7]							.   .   .   .   Child: 1  Const 2 of type int [line: 7]
.   .   .   Child: 1  Const 73 of type int [line: 7]							.   .   .   Child: 1  Const 73 of type int [line: 7]
.   .   Sibling: 1  Assign: := of type int [line: 8]							.   .   Sibling: 1  Assign: := of type int [line: 8]
.   .   .   Child: 0  Op: [ of type int [line: 8]							.   .   .   Child: 0  Op: [ of type int [line: 8]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Global loc: -5 size: 5] [line: 8]		.   .   .   .   Child: 0  Id: y of array of type int [mem: Global loc: -5 size: 5] [line: 8]
.   .   .   .   Child: 1  Const 1 of type int [line: 8]							.   .   .   .   Child: 1  Const 1 of type int [line: 8]
.   .   .   Child: 1  Const 211 of type int [line: 8]							.   .   .   Child: 1  Const 211 of type int [line: 8]
.   .   Sibling: 2  Call: output of type void [line: 9]							.   .   Sibling: 2  Call: output of type void [line: 9]
.   .   .   Child: 0  Op: + of type int [line: 9]							.   .   .   Child: 0  Op: + of type int [line: 9]
.   .   .   .   Child: 0  Op: [ of type int [line: 9]							.   .   .   .   Child: 0  Op: [ of type int [line: 9]
.   .   .   .   .   Child: 0  Id: x of array of type int [mem: Global loc: -1 size: 4] [line: 9]	.   .   .   .   .   Child: 0  Id: x of array of type int [mem: Global loc: -1 size: 4] [line: 9]
.   .   .   .   .   Child: 1  Const 2 of type int [line: 9]						.   .   .   .   .   Child: 1  Const 2 of type int [line: 9]
.   .   .   .   Child: 1  Op: [ of type int [line: 9]							.   .   .   .   Child: 1  Op: [ of type int [line: 9]
.   .   .   .   .   Child: 0  Id: y of array of type int [mem: Global loc: -5 size: 5] [line: 9]	.   .   .   .   .   Child: 0  Id: y of array of type int [mem: Global loc: -5 size: 5] [line: 9]
.   .   .   .   .   Child: 1  Const 1 of type int [line: 9]						.   .   .   .   .   Child: 1  Const 1 of type int [line: 9]
.   .   Sibling: 3  Call: outnl of type void [line: 10]							.   .   Sibling: 3  Call: outnl of type void [line: 10]
Offset for end of global space: -9									Offset for end of global space: -9
Number of warnings: 0											Number of warnings: 0
Number of errors: 0											Number of errors: 0
---- TMCODE DIFF ----
* C- compiler version 07-20									   |	* C- compiler version C-S21
* Built: Thu Dec  1 21:25:36 2022								   |	* Built: Apr 18, 2021 (toffset telemetry)
* Author: Ethan Corgatelli									   |	* Author: Robert B. Heckendorn
* File compiled: c05.c-										   |	* File compiled:  c05.c-
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION input											* FUNCTION input
  1:     ST  3,-1(1)	Store return address 								  1:     ST  3,-1(1)	Store return address 
  2:     IN  2,2,2	Grab int input 									  2:     IN  2,2,2	Grab int input 
  3:     LD  3,-1(1)	Load return address 								  3:     LD  3,-1(1)	Load return address 
  4:     LD  1,0(1)	Adjust fp 									  4:     LD  1,0(1)	Adjust fp 
  5:    JMP  7,0(3)	Return 										  5:    JMP  7,0(3)	Return 
* END FUNCTION input											* END FUNCTION input
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION output											* FUNCTION output
  6:     ST  3,-1(1)	Store return address 								  6:     ST  3,-1(1)	Store return address 
  7:     LD  3,-2(1)	Load parameter 									  7:     LD  3,-2(1)	Load parameter 
  8:    OUT  3,3,3	Output integer 									  8:    OUT  3,3,3	Output integer 
  9:     LD  3,-1(1)	Load return address 								  9:     LD  3,-1(1)	Load return address 
 10:     LD  1,0(1)	Adjust fp 									 10:     LD  1,0(1)	Adjust fp 
 11:    JMP  7,0(3)	Return 										 11:    JMP  7,0(3)	Return 
* END FUNCTION output											* END FUNCTION output
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION inputb											* FUNCTION inputb
 12:     ST  3,-1(1)	Store return address 								 12:     ST  3,-1(1)	Store return address 
 13:    INB  2,2,2	Grab bool input 								 13:    INB  2,2,2	Grab bool input 
 14:     LD  3,-1(1)	Load return address 								 14:     LD  3,-1(1)	Load return address 
 15:     LD  1,0(1)	Adjust fp 									 15:     LD  1,0(1)	Adjust fp 
 16:    JMP  7,0(3)	Return 										 16:    JMP  7,0(3)	Return 
* END FUNCTION inputb											* END FUNCTION inputb
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION outputb											* FUNCTION outputb
 17:     ST  3,-1(1)	Store return address 								 17:     ST  3,-1(1)	Store return address 
 18:     LD  3,-2(1)	Load parameter 									 18:     LD  3,-2(1)	Load parameter 
 19:   OUTB  3,3,3	Output bool 									 19:   OUTB  3,3,3	Output bool 
 20:     LD  3,-1(1)	Load return address 								 20:     LD  3,-1(1)	Load return address 
 21:     LD  1,0(1)	Adjust fp 									 21:     LD  1,0(1)	Adjust fp 
 22:    JMP  7,0(3)	Return 										 22:    JMP  7,0(3)	Return 
* END FUNCTION outputb											* END FUNCTION outputb
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION inputc											* FUNCTION inputc
 23:     ST  3,-1(1)	Store return address 								 23:     ST  3,-1(1)	Store return address 
 24:    INC  2,2,2	Grab char input 								 24:    INC  2,2,2	Grab char input 
 25:     LD  3,-1(1)	Load return address 								 25:     LD  3,-1(1)	Load return address 
 26:     LD  1,0(1)	Adjust fp 									 26:     LD  1,0(1)	Adjust fp 
 27:    JMP  7,0(3)	Return 										 27:    JMP  7,0(3)	Return 
* END FUNCTION inputc											* END FUNCTION inputc
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION outputc											* FUNCTION outputc
 28:     ST  3,-1(1)	Store return address 								 28:     ST  3,-1(1)	Store return address 
 29:     LD  3,-2(1)	Load parameter 									 29:     LD  3,-2(1)	Load parameter 
 30:   OUTC  3,3,3	Output char 									 30:   OUTC  3,3,3	Output char 
 31:     LD  3,-1(1)	Load return address 								 31:     LD  3,-1(1)	Load return address 
 32:     LD  1,0(1)	Adjust fp 									 32:     LD  1,0(1)	Adjust fp 
 33:    JMP  7,0(3)	Return 										 33:    JMP  7,0(3)	Return 
* END FUNCTION outputc											* END FUNCTION outputc
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION outnl											* FUNCTION outnl
 34:     ST  3,-1(1)	Store return address 								 34:     ST  3,-1(1)	Store return address 
 35:  OUTNL  3,3,3	Output a newline 								 35:  OUTNL  3,3,3	Output a newline 
 36:     LD  3,-1(1)	Load return address 								 36:     LD  3,-1(1)	Load return address 
 37:     LD  1,0(1)	Adjust fp 									 37:     LD  1,0(1)	Adjust fp 
 38:    JMP  7,0(3)	Return 										 38:    JMP  7,0(3)	Return 
* END FUNCTION outnl											* END FUNCTION outnl
* 													* 
* ** ** ** ** ** ** ** ** ** ** ** **									* ** ** ** ** ** ** ** ** ** ** ** **
* FUNCTION main												* FUNCTION main
* TOFF set: -2												* TOFF set: -2
 39:     ST  3,-1(1)	Store return address 								 39:     ST  3,-1(1)	Store return address 
* COMPOUND												* COMPOUND
* TOFF set: -2												* TOFF set: -2
* Compound Body												* Compound Body
* EXPRESSION												* EXPRESSION
 40:    LDC  3,2(6)	Load integer constant 								 40:    LDC  3,2(6)	Load integer constant 
 41:     ST  3,-2(1)	Push index 									 41:     ST  3,-2(1)	Push index 
* TOFF dec: -3												* TOFF dec: -3
 42:    LDC  3,73(6)	Load integer constant 								 42:    LDC  3,73(6)	Load integer constant 
* TOFF inc: -2												* TOFF inc: -2
 43:     LD  4,-2(1)	Pop index 									 43:     LD  4,-2(1)	Pop index 
 44:    LDA  5,-1(0)	Load address of base of array x							 44:    LDA  5,-1(0)	Load address of base of array x
 45:    SUB  5,5,4	Compute offset of value 							 45:    SUB  5,5,4	Compute offset of value 
 46:     ST  3,0(5)	Store variable x								 46:     ST  3,0(5)	Store variable x
* EXPRESSION												* EXPRESSION
 47:    LDC  3,1(6)	Load integer constant 								 47:    LDC  3,1(6)	Load integer constant 
 48:     ST  3,-2(1)	Push index 									 48:     ST  3,-2(1)	Push index 
* TOFF dec: -3												* TOFF dec: -3
 49:    LDC  3,211(6)	Load integer constant 								 49:    LDC  3,211(6)	Load integer constant 
* TOFF inc: -2												* TOFF inc: -2
 50:     LD  4,-2(1)	Pop index 									 50:     LD  4,-2(1)	Pop index 
 51:    LDA  5,-5(0)	Load address of base of array y							 51:    LDA  5,-5(0)	Load address of base of array y
 52:    SUB  5,5,4	Compute offset of value 							 52:    SUB  5,5,4	Compute offset of value 
 53:     ST  3,0(5)	Store variable y								 53:     ST  3,0(5)	Store variable y
* EXPRESSION												* EXPRESSION
* CALL output												* CALL output
 54:     ST  1,-2(1)	Store fp in ghost frame for output						 54:     ST  1,-2(1)	Store fp in ghost frame for output
* TOFF dec: -3												* TOFF dec: -3
* TOFF dec: -4												* TOFF dec: -4
* Param 1												* Param 1
 55:    LDA  3,-1(0)	Load address of base of array x							 55:    LDA  3,-1(0)	Load address of base of array x
 56:     ST  3,-4(1)	Push left side 									 56:     ST  3,-4(1)	Push left side 
* TOFF dec: -5												* TOFF dec: -5
 57:    LDC  3,2(6)	Load integer constant 								 57:    LDC  3,2(6)	Load integer constant 
* TOFF inc: -4												* TOFF inc: -4
 58:     LD  4,-4(1)	Pop left into ac1 								 58:     LD  4,-4(1)	Pop left into ac1 
 59:    SUB  3,4,3	compute location from index 							 59:    SUB  3,4,3	compute location from index 
 60:     LD  3,0(3)	Load array element 								 60:     LD  3,0(3)	Load array element 
 61:     ST  3,-4(1)	Push left side 									 61:     ST  3,-4(1)	Push left side 
* TOFF dec: -5												* TOFF dec: -5
 62:    LDA  3,-5(0)	Load address of base of array y							 62:    LDA  3,-5(0)	Load address of base of array y
 63:     ST  3,-5(1)	Push left side 									 63:     ST  3,-5(1)	Push left side 
* TOFF dec: -6												* TOFF dec: -6
 64:    LDC  3,1(6)	Load integer constant 								 64:    LDC  3,1(6)	Load integer constant 
* TOFF inc: -5												* TOFF inc: -5
 65:     LD  4,-5(1)	Pop left into ac1 								 65:     LD  4,-5(1)	Pop left into ac1 
 66:    SUB  3,4,3	compute location from index 							 66:    SUB  3,4,3	compute location from index 
 67:     LD  3,0(3)	Load array element 								 67:     LD  3,0(3)	Load array element 
* TOFF inc: -4												* TOFF inc: -4
 68:     LD  4,-4(1)	Pop left into ac1 								 68:     LD  4,-4(1)	Pop left into ac1 
 69:    ADD  3,4,3	Op + 										 69:    ADD  3,4,3	Op + 
 70:     ST  3,-4(1)	Push parameter 									 70:     ST  3,-4(1)	Push parameter 
* TOFF dec: -5												* TOFF dec: -5
* Param end output											* Param end output
 71:    LDA  1,-2(1)	Ghost frame becomes new active frame 						 71:    LDA  1,-2(1)	Ghost frame becomes new active frame 
 72:    LDA  3,1(7)	Return address in ac 								 72:    LDA  3,1(7)	Return address in ac 
 73:    JMP  7,-68(7)	CALL output									 73:    JMP  7,-68(7)	CALL output
 74:    LDA  3,0(2)	Save the result in ac 								 74:    LDA  3,0(2)	Save the result in ac 
* Call end output											* Call end output
* TOFF set: -2												* TOFF set: -2
* EXPRESSION												* EXPRESSION
* CALL outnl												* CALL outnl
 75:     ST  1,-2(1)	Store fp in ghost frame for outnl						 75:     ST  1,-2(1)	Store fp in ghost frame for outnl
* TOFF dec: -3												* TOFF dec: -3
* TOFF dec: -4												* TOFF dec: -4
* Param end outnl											* Param end outnl
 76:    LDA  1,-2(1)	Ghost frame becomes new active frame 						 76:    LDA  1,-2(1)	Ghost frame becomes new active frame 
 77:    LDA  3,1(7)	Return address in ac 								 77:    LDA  3,1(7)	Return address in ac 
 78:    JMP  7,-45(7)	CALL outnl									 78:    JMP  7,-45(7)	CALL outnl
 79:    LDA  3,0(2)	Save the result in ac 								 79:    LDA  3,0(2)	Save the result in ac 
* Call end outnl											* Call end outnl
* TOFF set: -2												* TOFF set: -2
* TOFF set: -2												* TOFF set: -2
* END COMPOUND												* END COMPOUND
* Add standard closing in case there is no return statement						* Add standard closing in case there is no return statement
 80:    LDC  2,0(6)	Set return value to 0 								 80:    LDC  2,0(6)	Set return value to 0 
 81:     LD  3,-1(1)	Load return address 								 81:     LD  3,-1(1)	Load return address 
 82:     LD  1,0(1)	Adjust fp 									 82:     LD  1,0(1)	Adjust fp 
 83:    JMP  7,0(3)	Return 										 83:    JMP  7,0(3)	Return 
* END FUNCTION main											* END FUNCTION main
  0:    JMP  7,83(7)	Jump to init [backpatch] 							  0:    JMP  7,83(7)	Jump to init [backpatch] 
* INIT													* INIT
 84:    LDA  1,-9(0)	set first frame at end of globals 						 84:    LDA  1,-9(0)	set first frame at end of globals 
 85:     ST  1,0(1)	store old fp (point to self) 							 85:     ST  1,0(1)	store old fp (point to self) 
* INIT GLOBALS AND STATICS										* INIT GLOBALS AND STATICS
 86:    LDC  3,3(6)	load size of array x								 86:    LDC  3,3(6)	load size of array x
 87:     ST  3,0(0)	save size of array x								 87:     ST  3,0(0)	save size of array x
 88:    LDC  3,4(6)	load size of array y								 88:    LDC  3,4(6)	load size of array y
 89:     ST  3,-4(0)	save size of array y								 89:     ST  3,-4(0)	save size of array y
* END INIT GLOBALS AND STATICS										* END INIT GLOBALS AND STATICS
 90:    LDA  3,1(7)	Return address in ac 								 90:    LDA  3,1(7)	Return address in ac 
 91:    JMP  7,-53(7)	Jump to main 									 91:    JMP  7,-53(7)	Jump to main 
 92:   HALT  0,0,0	DONE! 										 92:   HALT  0,0,0	DONE! 
* END INIT												* END INIT
---- OUTPUT DIFF ----
Number of warnings: 0											Number of warnings: 0
Number of errors: 0											Number of errors: 0
Loading file: data/UnitTests/c05.tm								   |	------------------------------------
Enter command: command: a 200000								   |	Loading file: UnitTests/c05.tm
command: o 500											   |	284
command: g											   <
284 												   <
												   <
Status: Halted											   <
Last executed cmd:   92: HALT  0,  0, 0  |  r[0]:9999 r[1]:9990 r[2]:0   r[3]:92  r[4]:73  r[5]:   <
PC was 92, PC is now 93										   <
command: x											   <
Bye.													Bye.
